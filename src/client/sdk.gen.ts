// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-axios';
import type { AppControllerGetHelloError, AppControllerGetHelloResponse, ComponentsControllerCreateData, ComponentsControllerCreateError, ComponentsControllerCreateResponse, ComponentsControllerFindAllData, ComponentsControllerFindAllError, ComponentsControllerFindAllResponse, ComponentsControllerUploadFilesData, ComponentsControllerUploadFilesError, ComponentsControllerUploadFilesResponse, ComponentsControllerGetImageData, ComponentsControllerGetImageError, ComponentsControllerGetImageResponse, ComponentsControllerFindOneData, ComponentsControllerFindOneError, ComponentsControllerFindOneResponse, ComponentsControllerUpdateData, ComponentsControllerUpdateError, ComponentsControllerUpdateResponse, ComponentsControllerRemoveData, ComponentsControllerRemoveError, ComponentsControllerRemoveResponse, ComponentsControllerAddComponentStockData, ComponentsControllerAddComponentStockError, ComponentsControllerAddComponentStockResponse, AssembledEquipmentControllerCreateConfigData, AssembledEquipmentControllerCreateConfigError, AssembledEquipmentControllerCreateConfigResponse, AssembledEquipmentControllerFindAllConfigsData, AssembledEquipmentControllerFindAllConfigsError, AssembledEquipmentControllerFindAllConfigsResponse, AssembledEquipmentControllerUploadFilesData, AssembledEquipmentControllerUploadFilesError, AssembledEquipmentControllerUploadFilesResponse, AssembledEquipmentControllerGetImageData, AssembledEquipmentControllerGetImageError, AssembledEquipmentControllerGetImageResponse, AssembledEquipmentControllerFindConfigByIdData, AssembledEquipmentControllerFindConfigByIdError, AssembledEquipmentControllerFindConfigByIdResponse, AssembledEquipmentControllerUpdateConfigData, AssembledEquipmentControllerUpdateConfigError, AssembledEquipmentControllerUpdateConfigResponse, AssembledEquipmentControllerRemoveConfigData, AssembledEquipmentControllerRemoveConfigError, AssembledEquipmentControllerRemoveConfigResponse, AssembledEquipmentControllerCheckBuildAvailabilityData, AssembledEquipmentControllerCheckBuildAvailabilityError, AssembledEquipmentControllerCheckBuildAvailabilityResponse, AssembledEquipmentControllerCreateBuildActivityData, AssembledEquipmentControllerCreateBuildActivityError, AssembledEquipmentControllerCreateBuildActivityResponse, AssembledEquipmentControllerFindAllBuildActivitiesData, AssembledEquipmentControllerFindAllBuildActivitiesError, AssembledEquipmentControllerFindAllBuildActivitiesResponse, AssembledEquipmentControllerGenerateAssemblyCheckPdfData, AssembledEquipmentControllerGenerateAssemblyCheckPdfError, AssembledEquipmentControllerGenerateAssemblyCheckPdfResponse, AssembledEquipmentControllerGenerateInventoryReportLayoutError, AssembledEquipmentControllerGenerateInventoryReportLayoutResponse, AssembledEquipmentControllerFindbuildActivityByIdData, AssembledEquipmentControllerFindbuildActivityByIdError, AssembledEquipmentControllerFindbuildActivityByIdResponse, AssembledEquipmentControllerUpdateBuildActivityData, AssembledEquipmentControllerUpdateBuildActivityError, AssembledEquipmentControllerUpdateBuildActivityResponse, AssembledEquipmentControllerRemoveBuildActivityData, AssembledEquipmentControllerRemoveBuildActivityError, AssembledEquipmentControllerRemoveBuildActivityResponse, SettingsControllerCreateData, SettingsControllerCreateError, SettingsControllerCreateResponse, SettingsControllerFindAllError, SettingsControllerFindAllResponse, SettingsControllerFindOneData, SettingsControllerFindOneError, SettingsControllerFindOneResponse, SettingsControllerUpdateData, SettingsControllerUpdateError, SettingsControllerUpdateResponse, ProductProfilesControllerCreateData, ProductProfilesControllerCreateError, ProductProfilesControllerCreateResponse, ProductProfilesControllerFindAllData, ProductProfilesControllerFindAllError, ProductProfilesControllerFindAllResponse, ProductProfilesControllerFindOneData, ProductProfilesControllerFindOneError, ProductProfilesControllerFindOneResponse, ProductProfilesControllerUpdateData, ProductProfilesControllerUpdateError, ProductProfilesControllerUpdateResponse, ProductProfilesControllerRemoveData, ProductProfilesControllerRemoveError, ProductProfilesControllerRemoveResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, EquipmentGroupsControllerCreateData, EquipmentGroupsControllerCreateError, EquipmentGroupsControllerCreateResponse, EquipmentGroupsControllerFindAllData, EquipmentGroupsControllerFindAllError, EquipmentGroupsControllerFindAllResponse, EquipmentGroupsControllerFindOneData, EquipmentGroupsControllerFindOneError, EquipmentGroupsControllerFindOneResponse, EquipmentGroupsControllerUpdateData, EquipmentGroupsControllerUpdateError, EquipmentGroupsControllerUpdateResponse, EquipmentGroupsControllerRemoveData, EquipmentGroupsControllerRemoveError, EquipmentGroupsControllerRemoveResponse, QualityLevelsControllerCreateData, QualityLevelsControllerCreateError, QualityLevelsControllerCreateResponse, QualityLevelsControllerFindAllData, QualityLevelsControllerFindAllError, QualityLevelsControllerFindAllResponse, QualityLevelsControllerFindOneData, QualityLevelsControllerFindOneError, QualityLevelsControllerFindOneResponse, QualityLevelsControllerUpdateData, QualityLevelsControllerUpdateError, QualityLevelsControllerUpdateResponse, QualityLevelsControllerRemoveData, QualityLevelsControllerRemoveError, QualityLevelsControllerRemoveResponse, UnitsControllerCreateData, UnitsControllerCreateError, UnitsControllerCreateResponse, UnitsControllerFindAllData, UnitsControllerFindAllError, UnitsControllerFindAllResponse, UnitsControllerFindOneData, UnitsControllerFindOneError, UnitsControllerFindOneResponse, UnitsControllerUpdateData, UnitsControllerUpdateError, UnitsControllerUpdateResponse, UnitsControllerRemoveData, UnitsControllerRemoveError, UnitsControllerRemoveResponse, UserHistoryControllerCreateData, UserHistoryControllerCreateError, UserHistoryControllerCreateResponse, UserHistoryControllerSearchData, UserHistoryControllerSearchError, UserHistoryControllerSearchResponse, UserHistoryControllerFindByUserIdData, UserHistoryControllerFindByUserIdError, UserHistoryControllerFindByUserIdResponse, UserHistoryControllerFindByAccountIdData, UserHistoryControllerFindByAccountIdError, UserHistoryControllerFindByAccountIdResponse, UserHistoryControllerFindOneData, UserHistoryControllerFindOneError, UserHistoryControllerFindOneResponse, UsersControllerCreateData, UsersControllerCreateError, UsersControllerCreateResponse, UsersControllerFindAllError, UsersControllerFindAllResponse, UsersControllerFindOneData, UsersControllerFindOneError, UsersControllerFindOneResponse, UsersControllerUpdateData, UsersControllerUpdateError, UsersControllerUpdateResponse, UsersControllerRemoveData, UsersControllerRemoveError, UsersControllerRemoveResponse, EquipmentDisposeControllerDisposeData, EquipmentDisposeControllerDisposeError, EquipmentDisposeControllerDisposeResponse, EquipmentDisposeControllerSearchData, EquipmentDisposeControllerSearchError, EquipmentDisposeControllerSearchResponse, EquipmentDisposeControllerFindOneData, EquipmentDisposeControllerFindOneError, EquipmentDisposeControllerFindOneResponse, EquipmentDisposeControllerUpdateData, EquipmentDisposeControllerUpdateError, EquipmentDisposeControllerUpdateResponse, EquipmentDisposeControllerRemoveData, EquipmentDisposeControllerRemoveError, EquipmentDisposeControllerRemoveResponse, EquipmentDisposeControllerFindByInstanceIdData, EquipmentDisposeControllerFindByInstanceIdError, EquipmentDisposeControllerFindByInstanceIdResponse, EquipmentDisposeControllerGenerateLiquidationFormLayoutError, EquipmentDisposeControllerGenerateLiquidationFormLayoutResponse, EquipmentRepairControllerRepairData, EquipmentRepairControllerRepairError, EquipmentRepairControllerRepairResponse, EquipmentRepairControllerSearchData, EquipmentRepairControllerSearchError, EquipmentRepairControllerSearchResponse, EquipmentHandoverControllerHandoverData, EquipmentHandoverControllerHandoverError, EquipmentHandoverControllerHandoverResponse, EquipmentHandoverControllerSearchData, EquipmentHandoverControllerSearchError, EquipmentHandoverControllerSearchResponse, EquipmentHandoverControllerGenerateHandoverReportFromLogData, EquipmentHandoverControllerGenerateHandoverReportFromLogError, EquipmentHandoverControllerGenerateHandoverReportFromLogResponse, EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateData, EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateError, EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateResponse, EquipmentHandoverControllerGenerateAnnualReceptionReportData, EquipmentHandoverControllerGenerateAnnualReceptionReportError, EquipmentHandoverControllerGenerateAnnualReceptionReportResponse, EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutData, EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutError, EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutResponse, EquipmentHandoverControllerGenerateAnnualRecallReportLayoutData, EquipmentHandoverControllerGenerateAnnualRecallReportLayoutError, EquipmentHandoverControllerGenerateAnnualRecallReportLayoutResponse, ActivityLogsControllerSearchData, ActivityLogsControllerSearchError, ActivityLogsControllerSearchResponse, ActivityLogsControllerFindByInstanceData, ActivityLogsControllerFindByInstanceError, ActivityLogsControllerFindByInstanceResponse, SyncEquipmentControllerCreateData, SyncEquipmentControllerCreateError, SyncEquipmentControllerCreateResponse, SyncEquipmentControllerFindAllData, SyncEquipmentControllerFindAllError, SyncEquipmentControllerFindAllResponse, SyncEquipmentControllerFindOneData, SyncEquipmentControllerFindOneError, SyncEquipmentControllerFindOneResponse, SyncEquipmentControllerUpdateData, SyncEquipmentControllerUpdateError, SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerRemoveData, SyncEquipmentControllerRemoveError, SyncEquipmentControllerRemoveResponse, EquipmentInstancesControllerCreateData, EquipmentInstancesControllerCreateError, EquipmentInstancesControllerCreateResponse, EquipmentInstancesControllerUploadFilesData, EquipmentInstancesControllerUploadFilesError, EquipmentInstancesControllerUploadFilesResponse, EquipmentInstancesControllerGetImageData, EquipmentInstancesControllerGetImageError, EquipmentInstancesControllerGetImageResponse, EquipmentInstancesControllerSearchData, EquipmentInstancesControllerSearchError, EquipmentInstancesControllerSearchResponse, EquipmentInstancesControllerFindOneData, EquipmentInstancesControllerFindOneError, EquipmentInstancesControllerFindOneResponse, EquipmentInstancesControllerUpdateData, EquipmentInstancesControllerUpdateError, EquipmentInstancesControllerUpdateResponse, EquipmentInstancesControllerRemoveData, EquipmentInstancesControllerRemoveError, EquipmentInstancesControllerRemoveResponse, EquipmentInstancesControllerRepairData, EquipmentInstancesControllerRepairError, EquipmentInstancesControllerRepairResponse, EquipmentInstancesControllerDisposeData, EquipmentInstancesControllerDisposeError, EquipmentInstancesControllerDisposeResponse } from './types.gen';

export const client = createClient(createConfig({
    throwOnError: true
}));

export class AppService {
    public static appControllerGetHello<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AppControllerGetHelloResponse, AppControllerGetHelloError, ThrowOnError>({
            ...options,
            url: '/api/v1'
        });
    }
    
}

export class AssemblyEquipmentsComponentsService {
    /**
     * [Admin] Thêm một vật tư/linh kiện mới
     */
    public static componentsControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<ComponentsControllerCreateResponse, ComponentsControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components'
        });
    }
    
    /**
     * Lấy danh sách vật tư/linh kiện
     */
    public static componentsControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<ComponentsControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<ComponentsControllerFindAllResponse, ComponentsControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components'
        });
    }
    
    /**
     * Upload multiple files to an equipment instance
     */
    public static componentsControllerUploadFiles<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerUploadFilesData, ThrowOnError>) {
        return (options?.client ?? client).post<ComponentsControllerUploadFilesResponse, ComponentsControllerUploadFilesError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/api/v1/assembly-equipments/components/{id}/upload'
        });
    }
    
    /**
     * Lấy file tài liệu của trang bị theo ID ảnh
     */
    public static componentsControllerGetImage<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerGetImageData, ThrowOnError>) {
        return (options?.client ?? client).get<ComponentsControllerGetImageResponse, ComponentsControllerGetImageError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components/images/{imageId}'
        });
    }
    
    /**
     * Lấy thông tin một vật tư/linh kiện theo ID
     */
    public static componentsControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<ComponentsControllerFindOneResponse, ComponentsControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin một vật tư/linh kiện
     */
    public static componentsControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<ComponentsControllerUpdateResponse, ComponentsControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một vật tư/linh kiện
     */
    public static componentsControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<ComponentsControllerRemoveResponse, ComponentsControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components/{id}'
        });
    }
    
    /**
     * Nhập thêm số lượng cho một vật tư/linh kiện và ghi lại lịch sử
     */
    public static componentsControllerAddComponentStock<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ComponentsControllerAddComponentStockData, ThrowOnError>) {
        return (options?.client ?? client).post<ComponentsControllerAddComponentStockResponse, ComponentsControllerAddComponentStockError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/components/{id}/add-stock'
        });
    }
    
    /**
     * Tạo mới một Cấu hình trang bị lắp ráp (Tương ứng form "Cấu hình trang bị lắp ráp")
     */
    public static assembledEquipmentControllerCreateConfig<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerCreateConfigData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerCreateConfigResponse, AssembledEquipmentControllerCreateConfigError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/configs'
        });
    }
    
    /**
     * Lấy danh sách các Cấu hình trang bị lắp ráp
     */
    public static assembledEquipmentControllerFindAllConfigs<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindAllConfigsResponse, AssembledEquipmentControllerFindAllConfigsError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/configs'
        });
    }
    
    /**
     * Tải lên tài liệu cho một cấu hình (Tương ứng nút "Browse" trong form "Cấu hình trang bị lắp ráp")
     */
    public static assembledEquipmentControllerUploadFiles<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerUploadFilesData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerUploadFilesResponse, AssembledEquipmentControllerUploadFilesError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/api/v1/assembly-equipments/configs/{id}/upload'
        });
    }
    
    /**
     * Lấy file tài liệu của trang bị lắp ráp theo ID ảnh
     */
    public static assembledEquipmentControllerGetImage<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerGetImageData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerGetImageResponse, AssembledEquipmentControllerGetImageError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/configs/{id}/images/{imageId}'
        });
    }
    
    /**
     * Lấy chi tiết một Cấu hình
     */
    public static assembledEquipmentControllerFindConfigById<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerFindConfigByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindConfigByIdResponse, AssembledEquipmentControllerFindConfigByIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/configs/{id}'
        });
    }
    
    /**
     * Cập nhật một Cấu hình
     */
    public static assembledEquipmentControllerUpdateConfig<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerUpdateConfigData, ThrowOnError>) {
        return (options?.client ?? client).patch<AssembledEquipmentControllerUpdateConfigResponse, AssembledEquipmentControllerUpdateConfigError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/configs/{id}'
        });
    }
    
    /**
     * Xóa một Cấu hình
     */
    public static assembledEquipmentControllerRemoveConfig<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerRemoveConfigData, ThrowOnError>) {
        return (options?.client ?? client).delete<AssembledEquipmentControllerRemoveConfigResponse, AssembledEquipmentControllerRemoveConfigError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/configs/{id}'
        });
    }
    
    /**
     * Kiểm tra khả năng xây dựng trang bị lắp ráp
     */
    public static assembledEquipmentControllerCheckBuildAvailability<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerCheckBuildAvailabilityData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerCheckBuildAvailabilityResponse, AssembledEquipmentControllerCheckBuildAvailabilityError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-check'
        });
    }
    
    /**
     * Thực hiện xây dựng trang bị và ghi nhận hoạt động
     */
    public static assembledEquipmentControllerCreateBuildActivity<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerCreateBuildActivityData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerCreateBuildActivityResponse, AssembledEquipmentControllerCreateBuildActivityError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-activities'
        });
    }
    
    /**
     * Lấy danh sách các hoạt động xây dựng trang bị
     */
    public static assembledEquipmentControllerFindAllBuildActivities<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindAllBuildActivitiesResponse, AssembledEquipmentControllerFindAllBuildActivitiesError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-activities'
        });
    }
    
    /**
     * Tạo báo cáo cho hoạt động xây dựng trang bị lắp ráp (Excel)
     */
    public static assembledEquipmentControllerGenerateAssemblyCheckPdf<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerGenerateAssemblyCheckPdfData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerGenerateAssemblyCheckPdfResponse, AssembledEquipmentControllerGenerateAssemblyCheckPdfError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-activities/{id}/pdf'
        });
    }
    
    /**
     * Tạo báo cáo thống kê kho trang bị lắp ráp (Excel)
     */
    public static assembledEquipmentControllerGenerateInventoryReportLayout<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerGenerateInventoryReportLayoutResponse, AssembledEquipmentControllerGenerateInventoryReportLayoutError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/inventory-report'
        });
    }
    
    /**
     * Lấy chi tiết một hoạt động xây dựng
     */
    public static assembledEquipmentControllerFindbuildActivityById<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerFindbuildActivityByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindbuildActivityByIdResponse, AssembledEquipmentControllerFindbuildActivityByIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-activities/{id}'
        });
    }
    
    /**
     * Cập nhật một hoạt động xây dựng trang bị lắp ráp
     */
    public static assembledEquipmentControllerUpdateBuildActivity<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerUpdateBuildActivityData, ThrowOnError>) {
        return (options?.client ?? client).patch<AssembledEquipmentControllerUpdateBuildActivityResponse, AssembledEquipmentControllerUpdateBuildActivityError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-activities/{id}'
        });
    }
    
    /**
     * Xóa một hoạt động xây dựng trang bị lắp ráp
     */
    public static assembledEquipmentControllerRemoveBuildActivity<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerRemoveBuildActivityData, ThrowOnError>) {
        return (options?.client ?? client).delete<AssembledEquipmentControllerRemoveBuildActivityResponse, AssembledEquipmentControllerRemoveBuildActivityError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/build-activities/{id}'
        });
    }
    
    /**
     * [Admin] Tạo một đơn vị mới
     */
    public static settingsControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SettingsControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<SettingsControllerCreateResponse, SettingsControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings'
        });
    }
    
    /**
     * Lấy danh sách tất cả cài đặt
     */
    public static settingsControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SettingsControllerFindAllResponse, SettingsControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings'
        });
    }
    
    /**
     * Lấy thông tin một cài đặt theo ID
     */
    public static settingsControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SettingsControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<SettingsControllerFindOneResponse, SettingsControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin một cài đặt
     */
    public static settingsControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SettingsControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<SettingsControllerUpdateResponse, SettingsControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/settings/{id}'
        });
    }
    
}

export class AssemblyEquipmentsProductProfilesService {
    /**
     * [Admin] Tạo một cấu hình sản phẩm lắp ghép mới
     */
    public static productProfilesControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ProductProfilesControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<ProductProfilesControllerCreateResponse, ProductProfilesControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/product-profiles'
        });
    }
    
    /**
     * Lấy danh sách cấu hình sản phẩm
     */
    public static productProfilesControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<ProductProfilesControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<ProductProfilesControllerFindAllResponse, ProductProfilesControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/product-profiles'
        });
    }
    
    /**
     * Lấy thông tin một cấu hình sản phẩm theo ID
     */
    public static productProfilesControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ProductProfilesControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<ProductProfilesControllerFindOneResponse, ProductProfilesControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/product-profiles/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật một cấu hình sản phẩm
     */
    public static productProfilesControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ProductProfilesControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<ProductProfilesControllerUpdateResponse, ProductProfilesControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/product-profiles/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một cấu hình sản phẩm
     */
    public static productProfilesControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ProductProfilesControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<ProductProfilesControllerRemoveResponse, ProductProfilesControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/assembly-equipments/product-profiles/{id}'
        });
    }
    
}

export class AuthService {
    public static authControllerLogin<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AuthControllerLoginData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthControllerLoginResponse, AuthControllerLoginError, ThrowOnError>({
            ...options,
            url: '/api/v1/auth/login'
        });
    }
    
}

export class CategoriesEquipmentGroupsService {
    /**
     * [Admin] Tạo một nhóm loại trang bị mới
     */
    public static equipmentGroupsControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentGroupsControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentGroupsControllerCreateResponse, EquipmentGroupsControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-groups'
        });
    }
    
    /**
     * Lấy danh sách nhóm loại trang bị
     */
    public static equipmentGroupsControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<EquipmentGroupsControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentGroupsControllerFindAllResponse, EquipmentGroupsControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-groups'
        });
    }
    
    /**
     * Lấy thông tin một nhóm loại trang bị theo ID
     */
    public static equipmentGroupsControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentGroupsControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentGroupsControllerFindOneResponse, EquipmentGroupsControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-groups/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật một nhóm loại trang bị
     */
    public static equipmentGroupsControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentGroupsControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<EquipmentGroupsControllerUpdateResponse, EquipmentGroupsControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-groups/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một nhóm loại trang bị
     */
    public static equipmentGroupsControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentGroupsControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<EquipmentGroupsControllerRemoveResponse, EquipmentGroupsControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-groups/{id}'
        });
    }
    
}

export class CategoriesQualityLevelsService {
    /**
     * [Admin] Tạo một phân cấp chất lượng mới
     */
    public static qualityLevelsControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<QualityLevelsControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<QualityLevelsControllerCreateResponse, QualityLevelsControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/quality-levels'
        });
    }
    
    /**
     * Lấy danh sách phân cấp chất lượng
     */
    public static qualityLevelsControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<QualityLevelsControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<QualityLevelsControllerFindAllResponse, QualityLevelsControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/quality-levels'
        });
    }
    
    /**
     * Lấy thông tin một phân cấp chất lượng theo ID
     */
    public static qualityLevelsControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<QualityLevelsControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<QualityLevelsControllerFindOneResponse, QualityLevelsControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/quality-levels/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật một phân cấp chất lượng
     */
    public static qualityLevelsControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<QualityLevelsControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<QualityLevelsControllerUpdateResponse, QualityLevelsControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/quality-levels/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một phân cấp chất lượng
     */
    public static qualityLevelsControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<QualityLevelsControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<QualityLevelsControllerRemoveResponse, QualityLevelsControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/quality-levels/{id}'
        });
    }
    
}

export class CoreUnitsService {
    /**
     * [Admin] Tạo một đơn vị mới
     */
    public static unitsControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UnitsControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<UnitsControllerCreateResponse, UnitsControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/units'
        });
    }
    
    /**
     * Lấy danh sách tất cả đơn vị
     */
    public static unitsControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<UnitsControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<UnitsControllerFindAllResponse, UnitsControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/units'
        });
    }
    
    /**
     * Lấy thông tin một đơn vị theo ID
     */
    public static unitsControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UnitsControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<UnitsControllerFindOneResponse, UnitsControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/units/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin một đơn vị
     */
    public static unitsControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UnitsControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<UnitsControllerUpdateResponse, UnitsControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/units/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một đơn vị
     */
    public static unitsControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UnitsControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<UnitsControllerRemoveResponse, UnitsControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/units/{id}'
        });
    }
    
}

export class CoreUserHistoryService {
    /**
     * [Admin] Tạo lịch sử người dùng mới
     */
    public static userHistoryControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserHistoryControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<UserHistoryControllerCreateResponse, UserHistoryControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/user-history'
        });
    }
    
    /**
     * [Admin] Tìm kiếm lịch sử người dùng
     */
    public static userHistoryControllerSearch<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<UserHistoryControllerSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<UserHistoryControllerSearchResponse, UserHistoryControllerSearchError, ThrowOnError>({
            ...options,
            url: '/api/v1/user-history/search'
        });
    }
    
    /**
     * [Admin] Lấy lịch sử của một người dùng
     */
    public static userHistoryControllerFindByUserId<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserHistoryControllerFindByUserIdData, ThrowOnError>) {
        return (options?.client ?? client).get<UserHistoryControllerFindByUserIdResponse, UserHistoryControllerFindByUserIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/user-history/user/{userId}'
        });
    }
    
    /**
     * [Admin] Lấy lịch sử thao tác của một tài khoản
     */
    public static userHistoryControllerFindByAccountId<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserHistoryControllerFindByAccountIdData, ThrowOnError>) {
        return (options?.client ?? client).get<UserHistoryControllerFindByAccountIdResponse, UserHistoryControllerFindByAccountIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/user-history/account/{accountId}'
        });
    }
    
    /**
     * [Admin] Lấy chi tiết một lịch sử người dùng
     */
    public static userHistoryControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserHistoryControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<UserHistoryControllerFindOneResponse, UserHistoryControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/user-history/{id}'
        });
    }
    
}

export class CoreUsersService {
    /**
     * [Admin] Tạo người dùng mới
     */
    public static usersControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UsersControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<UsersControllerCreateResponse, UsersControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/users'
        });
    }
    
    /**
     * [Admin] Lấy danh sách tất cả người dùng
     */
    public static usersControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UsersControllerFindAllResponse, UsersControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/users'
        });
    }
    
    /**
     * [Admin] Lấy thông tin một người dùng theo ID
     */
    public static usersControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UsersControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersControllerFindOneResponse, UsersControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin người dùng
     */
    public static usersControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UsersControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<UsersControllerUpdateResponse, UsersControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/{id}'
        });
    }
    
    /**
     * [Admin] Xóa người dùng
     */
    public static usersControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UsersControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<UsersControllerRemoveResponse, UsersControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/users/{id}'
        });
    }
    
}

export class EquipmentDisposeService {
    /**
     * Thanh lý trang bị
     */
    public static equipmentDisposeControllerDispose<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentDisposeControllerDisposeData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentDisposeControllerDisposeResponse, EquipmentDisposeControllerDisposeError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose'
        });
    }
    
    /**
     * Lấy danh sách thanh lý trang bị
     */
    public static equipmentDisposeControllerSearch<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<EquipmentDisposeControllerSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentDisposeControllerSearchResponse, EquipmentDisposeControllerSearchError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose'
        });
    }
    
    /**
     * Lấy thông tin thanh lý theo ID
     */
    public static equipmentDisposeControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentDisposeControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentDisposeControllerFindOneResponse, EquipmentDisposeControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose/{id}'
        });
    }
    
    /**
     * Cập nhật thông tin thanh lý
     */
    public static equipmentDisposeControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentDisposeControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).put<EquipmentDisposeControllerUpdateResponse, EquipmentDisposeControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose/{id}'
        });
    }
    
    /**
     * Xóa bản ghi thanh lý
     */
    public static equipmentDisposeControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentDisposeControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<EquipmentDisposeControllerRemoveResponse, EquipmentDisposeControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose/{id}'
        });
    }
    
    /**
     * Lấy thông tin thanh lý theo ID trang bị
     */
    public static equipmentDisposeControllerFindByInstanceId<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentDisposeControllerFindByInstanceIdData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentDisposeControllerFindByInstanceIdResponse, EquipmentDisposeControllerFindByInstanceIdError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose/instance/{instanceId}'
        });
    }
    
    /**
     * Tạo biểu mẫu thanh lý (Excel)
     */
    public static equipmentDisposeControllerGenerateLiquidationFormLayout<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentDisposeControllerGenerateLiquidationFormLayoutResponse, EquipmentDisposeControllerGenerateLiquidationFormLayoutError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-dispose/search/generate-liquidation-form-layout'
        });
    }
    
}

export class EquipmentRepairService {
    /**
     * [Admin] Sửa chữa một phiên bản trang bị
     */
    public static equipmentRepairControllerRepair<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentRepairControllerRepairData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentRepairControllerRepairResponse, EquipmentRepairControllerRepairError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-repair'
        });
    }
    
    /**
     * Tìm kiếm sửa chữa trang bị
     */
    public static equipmentRepairControllerSearch<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<EquipmentRepairControllerSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentRepairControllerSearchResponse, EquipmentRepairControllerSearchError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-repair/search'
        });
    }
    
}

export class HandoverEquipmentService {
    /**
     * [Admin] Bàn giao một phiên bản trang bị
     */
    public static equipmentHandoverControllerHandover<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentHandoverControllerHandoverData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentHandoverControllerHandoverResponse, EquipmentHandoverControllerHandoverError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover'
        });
    }
    
    /**
     * Tìm kiếm bàn giao trang bị
     */
    public static equipmentHandoverControllerSearch<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<EquipmentHandoverControllerSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentHandoverControllerSearchResponse, EquipmentHandoverControllerSearchError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover/search'
        });
    }
    
    /**
     * Xuất file Excel Biên bản bàn giao từ Activity Log
     */
    public static equipmentHandoverControllerGenerateHandoverReportFromLog<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentHandoverControllerGenerateHandoverReportFromLogData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentHandoverControllerGenerateHandoverReportFromLogResponse, EquipmentHandoverControllerGenerateHandoverReportFromLogError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover/{id}/handover-document'
        });
    }
    
    /**
     * Xuất báo cáo đánh giá bàn giao trang bị theo khoảng thời gian (Excel)
     */
    public static equipmentHandoverControllerGenerateHandoverEvaluationReportByDate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateResponse, EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover/evaluation-report'
        });
    }
    
    /**
     * Tạo danh mục trang bị tiếp nhận theo năm (Excel)
     */
    public static equipmentHandoverControllerGenerateAnnualReceptionReport<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentHandoverControllerGenerateAnnualReceptionReportData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentHandoverControllerGenerateAnnualReceptionReportResponse, EquipmentHandoverControllerGenerateAnnualReceptionReportError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover/annual-reception-report'
        });
    }
    
    /**
     * Tạo danh mục trang bị bàn giao theo năm (Excel)
     */
    public static equipmentHandoverControllerGenerateAnnualHandoverReportLayout<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutResponse, EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover/annual-handover-report'
        });
    }
    
    /**
     * Tạo danh mục trang bị thu hồi theo năm (Excel)
     */
    public static equipmentHandoverControllerGenerateAnnualRecallReportLayout<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentHandoverControllerGenerateAnnualRecallReportLayoutData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentHandoverControllerGenerateAnnualRecallReportLayoutResponse, EquipmentHandoverControllerGenerateAnnualRecallReportLayoutError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipment-handover/annual-recall-report'
        });
    }
    
}

export class OperationsActivityLogsService {
    /**
     * Tìm kiếm nhật ký hoạt động
     */
    public static activityLogsControllerSearch<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ActivityLogsControllerSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<ActivityLogsControllerSearchResponse, ActivityLogsControllerSearchError, ThrowOnError>({
            ...options,
            url: '/api/v1/activity-logs/search'
        });
    }
    
    /**
     * Lấy lịch sử hoạt động của một trang bị
     */
    public static activityLogsControllerFindByInstance<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<ActivityLogsControllerFindByInstanceData, ThrowOnError>) {
        return (options?.client ?? client).get<ActivityLogsControllerFindByInstanceResponse, ActivityLogsControllerFindByInstanceError, ThrowOnError>({
            ...options,
            url: '/api/v1/activity-logs/instance/{instanceId}'
        });
    }
    
}

export class SyncEquipmentsCatalogService {
    /**
     * [Admin] Tạo một loại trang bị mới trong danh mục
     */
    public static syncEquipmentControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<SyncEquipmentControllerCreateResponse, SyncEquipmentControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/sync-equipments/catalog'
        });
    }
    
    /**
     * Lấy danh sách các loại trang bị
     */
    public static syncEquipmentControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerFindAllResponse, SyncEquipmentControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/v1/sync-equipments/catalog'
        });
    }
    
    /**
     * Lấy thông tin một loại trang bị theo ID
     */
    public static syncEquipmentControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerFindOneResponse, SyncEquipmentControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/sync-equipments/catalog/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin một loại trang bị
     */
    public static syncEquipmentControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/sync-equipments/catalog/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một loại trang bị khỏi danh mục
     */
    public static syncEquipmentControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<SyncEquipmentControllerRemoveResponse, SyncEquipmentControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/sync-equipments/catalog/{id}'
        });
    }
    
}

export class SyncEquipmentsInstancesService {
    /**
     * [Admin] Thêm một phiên bản trang bị mới (nhập kho)
     */
    public static equipmentInstancesControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentInstancesControllerCreateResponse, EquipmentInstancesControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances'
        });
    }
    
    /**
     * Upload multiple files to an equipment instance
     */
    public static equipmentInstancesControllerUploadFiles<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerUploadFilesData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentInstancesControllerUploadFilesResponse, EquipmentInstancesControllerUploadFilesError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/api/v1/equipments/instances/upload'
        });
    }
    
    /**
     * Lấy file ảnh của trang bị theo ID ảnh
     */
    public static equipmentInstancesControllerGetImage<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerGetImageData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentInstancesControllerGetImageResponse, EquipmentInstancesControllerGetImageError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/images/{imageId}'
        });
    }
    
    /**
     * Tìm kiếm nâng cao các phiên bản trang bị
     */
    public static equipmentInstancesControllerSearch<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentInstancesControllerSearchResponse, EquipmentInstancesControllerSearchError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/search'
        });
    }
    
    /**
     * Lấy thông tin một phiên bản trang bị theo ID
     */
    public static equipmentInstancesControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<EquipmentInstancesControllerFindOneResponse, EquipmentInstancesControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin một phiên bản trang bị
     */
    public static equipmentInstancesControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<EquipmentInstancesControllerUpdateResponse, EquipmentInstancesControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/{id}'
        });
    }
    
    /**
     * [Admin] Xóa một phiên bản trang bị
     */
    public static equipmentInstancesControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<EquipmentInstancesControllerRemoveResponse, EquipmentInstancesControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/{id}'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin sửa chữa cho trang bị
     */
    public static equipmentInstancesControllerRepair<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerRepairData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentInstancesControllerRepairResponse, EquipmentInstancesControllerRepairError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/{id}/repair'
        });
    }
    
    /**
     * [Admin] Cập nhật thông tin thanh lý cho trang bị
     */
    public static equipmentInstancesControllerDispose<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<EquipmentInstancesControllerDisposeData, ThrowOnError>) {
        return (options?.client ?? client).post<EquipmentInstancesControllerDisposeResponse, EquipmentInstancesControllerDisposeError, ThrowOnError>({
            ...options,
            url: '/api/v1/equipments/instances/{id}/dispose'
        });
    }
    
}