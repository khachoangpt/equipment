// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { AssembledEquipmentControllerCheckAssemblyPossibilityData, AssembledEquipmentControllerCheckAssemblyPossibilityError, AssembledEquipmentControllerCheckAssemblyPossibilityResponse, AssembledEquipmentControllerCreateComponentData, AssembledEquipmentControllerCreateComponentError, AssembledEquipmentControllerCreateComponentResponse, AssembledEquipmentControllerFindAllComponentsError, AssembledEquipmentControllerFindAllComponentsResponse, AssembledEquipmentControllerFindComponentByIdData, AssembledEquipmentControllerFindComponentByIdError, AssembledEquipmentControllerFindComponentByIdResponse, AssembledEquipmentControllerUpdateComponentData, AssembledEquipmentControllerUpdateComponentError, AssembledEquipmentControllerUpdateComponentResponse, AssembledEquipmentControllerRemoveComponentData, AssembledEquipmentControllerRemoveComponentError, AssembledEquipmentControllerRemoveComponentResponse, AssembledEquipmentControllerCreateProductData, AssembledEquipmentControllerCreateProductError, AssembledEquipmentControllerCreateProductResponse, AssembledEquipmentControllerFindAllProductsError, AssembledEquipmentControllerFindAllProductsResponse, CategoriesControllerCreateData, CategoriesControllerCreateError, CategoriesControllerCreateResponse, CategoriesControllerFindAllData, CategoriesControllerFindAllError, CategoriesControllerFindAllResponse, CategoriesControllerFindOneData, CategoriesControllerFindOneError, CategoriesControllerFindOneResponse, CategoriesControllerUpdateData, CategoriesControllerUpdateError, CategoriesControllerUpdateResponse, CategoriesControllerRemoveData, CategoriesControllerRemoveError, CategoriesControllerRemoveResponse, AppControllerGetHelloError, AppControllerGetHelloResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, OrganizationControllerCreateUnitData, OrganizationControllerCreateUnitError, OrganizationControllerCreateUnitResponse, OrganizationControllerFindAllUnitsError, OrganizationControllerFindAllUnitsResponse, OrganizationControllerRemoveUnitData, OrganizationControllerRemoveUnitError, OrganizationControllerRemoveUnitResponse, OrganizationControllerUpdateUnitData, OrganizationControllerUpdateUnitError, OrganizationControllerUpdateUnitResponse, OrganizationControllerFindOneUnitData, OrganizationControllerFindOneUnitError, OrganizationControllerFindOneUnitResponse, SyncEquipmentControllerGetHandoverLogsError, SyncEquipmentControllerGetHandoverLogsResponse, SyncEquipmentControllerHandoverData, SyncEquipmentControllerHandoverError, SyncEquipmentControllerHandoverResponse, SyncEquipmentControllerGetMaintenanceLogsError, SyncEquipmentControllerGetMaintenanceLogsResponse, SyncEquipmentControllerLogMaintenanceData, SyncEquipmentControllerLogMaintenanceError, SyncEquipmentControllerLogMaintenanceResponse, SyncEquipmentControllerGetLiquidationLogsError, SyncEquipmentControllerGetLiquidationLogsResponse, SyncEquipmentControllerLiquidateData, SyncEquipmentControllerLiquidateError, SyncEquipmentControllerLiquidateResponse, SyncEquipmentControllerCreateData, SyncEquipmentControllerCreateError, SyncEquipmentControllerCreateResponse, SyncEquipmentControllerFindAllData, SyncEquipmentControllerFindAllError, SyncEquipmentControllerFindAllResponse, SyncEquipmentControllerFindOneData, SyncEquipmentControllerFindOneError, SyncEquipmentControllerFindOneResponse, SyncEquipmentControllerUpdateData, SyncEquipmentControllerUpdateError, SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerRemoveData, SyncEquipmentControllerRemoveError, SyncEquipmentControllerRemoveResponse, SyncEquipmentControllerPerformInventoryData, SyncEquipmentControllerPerformInventoryError, SyncEquipmentControllerPerformInventoryResponse, UserControllerCreateData, UserControllerCreateError, UserControllerCreateResponse, UserControllerGetAllError, UserControllerGetAllResponse, UserControllerGetByIdData, UserControllerGetByIdError, UserControllerGetByIdResponse, UserControllerRemoveData, UserControllerRemoveError, UserControllerRemoveResponse, UserControllerUpdateData, UserControllerUpdateError, UserControllerUpdateResponse } from './types.gen';

export const client = createClient(createConfig({
    throwOnError: true
}));

export class AssembledEquipmentService {
    /**
     * Kiểm tra khả năng lắp ráp trang bị
     */
    public static assembledEquipmentControllerCheckAssemblyPossibility<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerCheckAssemblyPossibilityData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerCheckAssemblyPossibilityResponse, AssembledEquipmentControllerCheckAssemblyPossibilityError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/check-assembly-possibility'
        });
    }
    
    /**
     * Thêm mới một vật tư/linh kiện
     */
    public static assembledEquipmentControllerCreateComponent<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerCreateComponentData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerCreateComponentResponse, AssembledEquipmentControllerCreateComponentError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/components'
        });
    }
    
    /**
     * Lấy danh sách vật tư/linh kiện
     */
    public static assembledEquipmentControllerFindAllComponents<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindAllComponentsResponse, AssembledEquipmentControllerFindAllComponentsError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/components'
        });
    }
    
    /**
     * Lấy chi tiết vật tư/linh kiện
     */
    public static assembledEquipmentControllerFindComponentById<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerFindComponentByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindComponentByIdResponse, AssembledEquipmentControllerFindComponentByIdError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/components/{id}'
        });
    }
    
    /**
     * Cập nhật vật tư/linh kiện
     */
    public static assembledEquipmentControllerUpdateComponent<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerUpdateComponentData, ThrowOnError>) {
        return (options?.client ?? client).patch<AssembledEquipmentControllerUpdateComponentResponse, AssembledEquipmentControllerUpdateComponentError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/components/{id}'
        });
    }
    
    /**
     * Xóa vật tư/linh kiện
     */
    public static assembledEquipmentControllerRemoveComponent<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerRemoveComponentData, ThrowOnError>) {
        return (options?.client ?? client).delete<AssembledEquipmentControllerRemoveComponentResponse, AssembledEquipmentControllerRemoveComponentError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/components/{id}'
        });
    }
    
    /**
     * Thêm mới một cấu hình sản phẩm lắp ghép
     */
    public static assembledEquipmentControllerCreateProduct<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AssembledEquipmentControllerCreateProductData, ThrowOnError>) {
        return (options?.client ?? client).post<AssembledEquipmentControllerCreateProductResponse, AssembledEquipmentControllerCreateProductError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/products'
        });
    }
    
    /**
     * Lấy danh sách cấu hình sản phẩm lắp ghép
     */
    public static assembledEquipmentControllerFindAllProducts<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AssembledEquipmentControllerFindAllProductsResponse, AssembledEquipmentControllerFindAllProductsError, ThrowOnError>({
            ...options,
            url: '/api/assembled-equipment/products'
        });
    }
    
}

export class CategoriesService {
    /**
     * Tạo một danh mục mới (Nhóm loại TB, Phân cấp chất lượng)
     */
    public static categoriesControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<CategoriesControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<CategoriesControllerCreateResponse, CategoriesControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/categories'
        });
    }
    
    /**
     * Lấy danh sách các danh mục theo loại
     */
    public static categoriesControllerFindAll<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<CategoriesControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<CategoriesControllerFindAllResponse, CategoriesControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/categories'
        });
    }
    
    /**
     * Lấy thông tin chi tiết một danh mục
     */
    public static categoriesControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<CategoriesControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<CategoriesControllerFindOneResponse, CategoriesControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/categories/{id}'
        });
    }
    
    /**
     * Cập nhật một danh mục
     */
    public static categoriesControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<CategoriesControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<CategoriesControllerUpdateResponse, CategoriesControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/categories/{id}'
        });
    }
    
    /**
     * Xóa một danh mục
     */
    public static categoriesControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<CategoriesControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<CategoriesControllerRemoveResponse, CategoriesControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/categories/{id}'
        });
    }
    
}

export class DefaultService {
    public static appControllerGetHello<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<AppControllerGetHelloResponse, AppControllerGetHelloError, ThrowOnError>({
            ...options,
            url: '/api'
        });
    }
    
    public static authControllerLogin<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<AuthControllerLoginData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthControllerLoginResponse, AuthControllerLoginError, ThrowOnError>({
            ...options,
            url: '/api/auth/login'
        });
    }
    
}

export class OrganizationService {
    /**
     * Tạo mới một đơn vị/phòng ban
     */
    public static organizationControllerCreateUnit<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<OrganizationControllerCreateUnitData, ThrowOnError>) {
        return (options?.client ?? client).post<OrganizationControllerCreateUnitResponse, OrganizationControllerCreateUnitError, ThrowOnError>({
            ...options,
            url: '/api/organization/units'
        });
    }
    
    /**
     * Lấy danh sách tất cả đơn vị/phòng ban
     */
    public static organizationControllerFindAllUnits<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<OrganizationControllerFindAllUnitsResponse, OrganizationControllerFindAllUnitsError, ThrowOnError>({
            ...options,
            url: '/api/organization/units'
        });
    }
    
    /**
     * Xóa một đơn vị/phòng ban
     */
    public static organizationControllerRemoveUnit<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<OrganizationControllerRemoveUnitData, ThrowOnError>) {
        return (options?.client ?? client).delete<OrganizationControllerRemoveUnitResponse, OrganizationControllerRemoveUnitError, ThrowOnError>({
            ...options,
            url: '/api/organization/units/{id}'
        });
    }
    
    /**
     * Cập nhật thông tin một đơn vị/phòng ban
     */
    public static organizationControllerUpdateUnit<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<OrganizationControllerUpdateUnitData, ThrowOnError>) {
        return (options?.client ?? client).patch<OrganizationControllerUpdateUnitResponse, OrganizationControllerUpdateUnitError, ThrowOnError>({
            ...options,
            url: '/api/organization/units/{id}'
        });
    }
    
    /**
     * Lấy thông tin một đơn vị/phòng ban
     */
    public static organizationControllerFindOneUnit<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<OrganizationControllerFindOneUnitData, ThrowOnError>) {
        return (options?.client ?? client).get<OrganizationControllerFindOneUnitResponse, OrganizationControllerFindOneUnitError, ThrowOnError>({
            ...options,
            url: '/api/organization/units/{id}'
        });
    }
    
}

export class SynchronousEquipmentService {
    /**
     * Lấy danh sách bàn giao trang bị
     */
    public static syncEquipmentControllerGetHandoverLogs<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerGetHandoverLogsResponse, SyncEquipmentControllerGetHandoverLogsError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/handover'
        });
    }
    
    /**
     * Thực hiện bàn giao trang bị
     */
    public static syncEquipmentControllerHandover<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerHandoverData, ThrowOnError>) {
        return (options?.client ?? client).post<SyncEquipmentControllerHandoverResponse, SyncEquipmentControllerHandoverError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/handover'
        });
    }
    
    /**
     * Lấy danh sách bảo dưỡng của tất cả trang bị
     */
    public static syncEquipmentControllerGetMaintenanceLogs<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerGetMaintenanceLogsResponse, SyncEquipmentControllerGetMaintenanceLogsError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/maintenance'
        });
    }
    
    /**
     * Ghi nhận thông tin bảo dưỡng cho một trang bị
     */
    public static syncEquipmentControllerLogMaintenance<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerLogMaintenanceData, ThrowOnError>) {
        return (options?.client ?? client).post<SyncEquipmentControllerLogMaintenanceResponse, SyncEquipmentControllerLogMaintenanceError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/maintenance'
        });
    }
    
    /**
     * Lấy danh sách thanh lý của tất cả trang bị
     */
    public static syncEquipmentControllerGetLiquidationLogs<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerGetLiquidationLogsResponse, SyncEquipmentControllerGetLiquidationLogsError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/liquidation'
        });
    }
    
    /**
     * Thực hiện thanh lý nhiều trang bị
     */
    public static syncEquipmentControllerLiquidate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerLiquidateData, ThrowOnError>) {
        return (options?.client ?? client).post<SyncEquipmentControllerLiquidateResponse, SyncEquipmentControllerLiquidateError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/liquidation'
        });
    }
    
    /**
     * Khởi tạo/Thêm mới trang bị
     */
    public static syncEquipmentControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<SyncEquipmentControllerCreateResponse, SyncEquipmentControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment'
        });
    }
    
    /**
     * Lấy danh sách trang bị (có thể lọc theo đơn vị)
     */
    public static syncEquipmentControllerFindAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerFindAllResponse, SyncEquipmentControllerFindAllError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment'
        });
    }
    
    /**
     * Lấy thông tin chi tiết một trang bị
     */
    public static syncEquipmentControllerFindOne<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerFindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<SyncEquipmentControllerFindOneResponse, SyncEquipmentControllerFindOneError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/{id}'
        });
    }
    
    /**
     * Cập nhật thông tin trang bị
     */
    public static syncEquipmentControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/{id}'
        });
    }
    
    /**
     * Xóa một trang bị
     */
    public static syncEquipmentControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<SyncEquipmentControllerRemoveResponse, SyncEquipmentControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/{id}'
        });
    }
    
    /**
     * Thực hiện kiểm kê, cập nhật trạng thái trang bị
     */
    public static syncEquipmentControllerPerformInventory<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<SyncEquipmentControllerPerformInventoryData, ThrowOnError>) {
        return (options?.client ?? client).post<SyncEquipmentControllerPerformInventoryResponse, SyncEquipmentControllerPerformInventoryError, ThrowOnError>({
            ...options,
            url: '/api/sync-equipment/inventory'
        });
    }
    
}

export class UsersService {
    /**
     * Tạo người dùng mới (chỉ Admin)
     */
    public static userControllerCreate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserControllerCreateData, ThrowOnError>) {
        return (options?.client ?? client).post<UserControllerCreateResponse, UserControllerCreateError, ThrowOnError>({
            ...options,
            url: '/api/user'
        });
    }
    
    /**
     * Lấy danh sách người dùng
     */
    public static userControllerGetAll<ThrowOnError extends boolean = true>(options?: OptionsLegacyParser<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UserControllerGetAllResponse, UserControllerGetAllError, ThrowOnError>({
            ...options,
            url: '/api/user'
        });
    }
    
    /**
     * Lấy thông tin người dùng theo ID
     */
    public static userControllerGetById<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserControllerGetByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<UserControllerGetByIdResponse, UserControllerGetByIdError, ThrowOnError>({
            ...options,
            url: '/api/user/{id}'
        });
    }
    
    /**
     * Xo 1 người dùng
     */
    public static userControllerRemove<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserControllerRemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<UserControllerRemoveResponse, UserControllerRemoveError, ThrowOnError>({
            ...options,
            url: '/api/user/{id}'
        });
    }
    
    /**
     * Cập nhật thông tin người dùng
     */
    public static userControllerUpdate<ThrowOnError extends boolean = true>(options: OptionsLegacyParser<UserControllerUpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<UserControllerUpdateResponse, UserControllerUpdateError, ThrowOnError>({
            ...options,
            url: '/api/user/{id}'
        });
    }
    
}