// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AssembledEquipmentControllerCheckAssemblyPossibilityData, AssembledEquipmentControllerCheckAssemblyPossibilityError, AssembledEquipmentControllerCheckAssemblyPossibilityResponse, AssembledEquipmentControllerCreateComponentData, AssembledEquipmentControllerCreateComponentError, AssembledEquipmentControllerCreateComponentResponse, AssembledEquipmentControllerFindComponentByIdData, AssembledEquipmentControllerUpdateComponentData, AssembledEquipmentControllerUpdateComponentError, AssembledEquipmentControllerUpdateComponentResponse, AssembledEquipmentControllerRemoveComponentData, AssembledEquipmentControllerRemoveComponentError, AssembledEquipmentControllerRemoveComponentResponse, AssembledEquipmentControllerCreateProductData, AssembledEquipmentControllerCreateProductError, AssembledEquipmentControllerCreateProductResponse, CategoriesControllerCreateData, CategoriesControllerCreateError, CategoriesControllerCreateResponse, CategoriesControllerFindAllData, CategoriesControllerFindOneData, CategoriesControllerUpdateData, CategoriesControllerUpdateError, CategoriesControllerUpdateResponse, CategoriesControllerRemoveData, CategoriesControllerRemoveError, CategoriesControllerRemoveResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, OrganizationControllerCreateUnitData, OrganizationControllerCreateUnitError, OrganizationControllerCreateUnitResponse, OrganizationControllerRemoveUnitData, OrganizationControllerRemoveUnitError, OrganizationControllerRemoveUnitResponse, OrganizationControllerUpdateUnitData, OrganizationControllerUpdateUnitError, OrganizationControllerUpdateUnitResponse, OrganizationControllerFindOneUnitData, SyncEquipmentControllerHandoverData, SyncEquipmentControllerHandoverError, SyncEquipmentControllerHandoverResponse, SyncEquipmentControllerLogMaintenanceData, SyncEquipmentControllerLogMaintenanceError, SyncEquipmentControllerLogMaintenanceResponse, SyncEquipmentControllerLiquidateData, SyncEquipmentControllerLiquidateError, SyncEquipmentControllerLiquidateResponse, SyncEquipmentControllerCreateData, SyncEquipmentControllerCreateError, SyncEquipmentControllerCreateResponse, SyncEquipmentControllerFindAllData, SyncEquipmentControllerFindOneData, SyncEquipmentControllerUpdateData, SyncEquipmentControllerUpdateError, SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerRemoveData, SyncEquipmentControllerRemoveError, SyncEquipmentControllerRemoveResponse, SyncEquipmentControllerPerformInventoryData, SyncEquipmentControllerPerformInventoryError, SyncEquipmentControllerPerformInventoryResponse, UserControllerCreateData, UserControllerCreateError, UserControllerCreateResponse, UserControllerGetByIdData, UserControllerRemoveData, UserControllerRemoveError, UserControllerRemoveResponse, UserControllerUpdateData, UserControllerUpdateError, UserControllerUpdateResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, AssembledEquipmentService, CategoriesService, DefaultService, OrganizationService, SynchronousEquipmentService, UsersService } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const assembledEquipmentControllerCheckAssemblyPossibilityQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerCheckAssemblyPossibilityData>) => [
    createQueryKey('assembledEquipmentControllerCheckAssemblyPossibility', options)
];

export const assembledEquipmentControllerCheckAssemblyPossibilityOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerCheckAssemblyPossibilityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerCheckAssemblyPossibility({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerCheckAssemblyPossibilityQueryKey(options)
    });
};

export const assembledEquipmentControllerCheckAssemblyPossibilityMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerCheckAssemblyPossibilityData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerCheckAssemblyPossibilityResponse, AxiosError<AssembledEquipmentControllerCheckAssemblyPossibilityError>, OptionsLegacyParser<AssembledEquipmentControllerCheckAssemblyPossibilityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerCheckAssemblyPossibility({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerCreateComponentQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateComponentData>) => [
    createQueryKey('assembledEquipmentControllerCreateComponent', options)
];

export const assembledEquipmentControllerCreateComponentOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateComponentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerCreateComponent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerCreateComponentQueryKey(options)
    });
};

export const assembledEquipmentControllerCreateComponentMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerCreateComponentData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerCreateComponentResponse, AxiosError<AssembledEquipmentControllerCreateComponentError>, OptionsLegacyParser<AssembledEquipmentControllerCreateComponentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerCreateComponent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerFindAllComponentsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('assembledEquipmentControllerFindAllComponents', options)
];

export const assembledEquipmentControllerFindAllComponentsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerFindAllComponents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindAllComponentsQueryKey(options)
    });
};

export const assembledEquipmentControllerFindComponentByIdQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerFindComponentByIdData>) => [
    createQueryKey('assembledEquipmentControllerFindComponentById', options)
];

export const assembledEquipmentControllerFindComponentByIdOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerFindComponentByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerFindComponentById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindComponentByIdQueryKey(options)
    });
};

export const assembledEquipmentControllerUpdateComponentMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerUpdateComponentData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerUpdateComponentResponse, AxiosError<AssembledEquipmentControllerUpdateComponentError>, OptionsLegacyParser<AssembledEquipmentControllerUpdateComponentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerUpdateComponent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerRemoveComponentMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerRemoveComponentData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerRemoveComponentResponse, AxiosError<AssembledEquipmentControllerRemoveComponentError>, OptionsLegacyParser<AssembledEquipmentControllerRemoveComponentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerRemoveComponent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerCreateProductQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateProductData>) => [
    createQueryKey('assembledEquipmentControllerCreateProduct', options)
];

export const assembledEquipmentControllerCreateProductOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateProductData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerCreateProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerCreateProductQueryKey(options)
    });
};

export const assembledEquipmentControllerCreateProductMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerCreateProductData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerCreateProductResponse, AxiosError<AssembledEquipmentControllerCreateProductError>, OptionsLegacyParser<AssembledEquipmentControllerCreateProductData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerCreateProduct({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerFindAllProductsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('assembledEquipmentControllerFindAllProducts', options)
];

export const assembledEquipmentControllerFindAllProductsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssembledEquipmentService.assembledEquipmentControllerFindAllProducts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindAllProductsQueryKey(options)
    });
};

export const categoriesControllerCreateQueryKey = (options: OptionsLegacyParser<CategoriesControllerCreateData>) => [
    createQueryKey('categoriesControllerCreate', options)
];

export const categoriesControllerCreateOptions = (options: OptionsLegacyParser<CategoriesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesService.categoriesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: categoriesControllerCreateQueryKey(options)
    });
};

export const categoriesControllerCreateMutation = (options?: Partial<OptionsLegacyParser<CategoriesControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<CategoriesControllerCreateResponse, AxiosError<CategoriesControllerCreateError>, OptionsLegacyParser<CategoriesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesService.categoriesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const categoriesControllerFindAllQueryKey = (options: OptionsLegacyParser<CategoriesControllerFindAllData>) => [
    createQueryKey('categoriesControllerFindAll', options)
];

export const categoriesControllerFindAllOptions = (options: OptionsLegacyParser<CategoriesControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesService.categoriesControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: categoriesControllerFindAllQueryKey(options)
    });
};

export const categoriesControllerFindOneQueryKey = (options: OptionsLegacyParser<CategoriesControllerFindOneData>) => [
    createQueryKey('categoriesControllerFindOne', options)
];

export const categoriesControllerFindOneOptions = (options: OptionsLegacyParser<CategoriesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesService.categoriesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: categoriesControllerFindOneQueryKey(options)
    });
};

export const categoriesControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<CategoriesControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<CategoriesControllerUpdateResponse, AxiosError<CategoriesControllerUpdateError>, OptionsLegacyParser<CategoriesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesService.categoriesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const categoriesControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<CategoriesControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<CategoriesControllerRemoveResponse, AxiosError<CategoriesControllerRemoveError>, OptionsLegacyParser<CategoriesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesService.categoriesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const appControllerGetHelloQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('appControllerGetHello', options)
];

export const appControllerGetHelloOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await DefaultService.appControllerGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHelloQueryKey(options)
    });
};

export const authControllerLoginQueryKey = (options: OptionsLegacyParser<AuthControllerLoginData>) => [
    createQueryKey('authControllerLogin', options)
];

export const authControllerLoginOptions = (options: OptionsLegacyParser<AuthControllerLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await DefaultService.authControllerLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerLoginQueryKey(options)
    });
};

export const authControllerLoginMutation = (options?: Partial<OptionsLegacyParser<AuthControllerLoginData>>) => {
    const mutationOptions: UseMutationOptions<AuthControllerLoginResponse, AxiosError<AuthControllerLoginError>, OptionsLegacyParser<AuthControllerLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await DefaultService.authControllerLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerCreateUnitQueryKey = (options: OptionsLegacyParser<OrganizationControllerCreateUnitData>) => [
    createQueryKey('organizationControllerCreateUnit', options)
];

export const organizationControllerCreateUnitOptions = (options: OptionsLegacyParser<OrganizationControllerCreateUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OrganizationService.organizationControllerCreateUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerCreateUnitQueryKey(options)
    });
};

export const organizationControllerCreateUnitMutation = (options?: Partial<OptionsLegacyParser<OrganizationControllerCreateUnitData>>) => {
    const mutationOptions: UseMutationOptions<OrganizationControllerCreateUnitResponse, AxiosError<OrganizationControllerCreateUnitError>, OptionsLegacyParser<OrganizationControllerCreateUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await OrganizationService.organizationControllerCreateUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerFindAllUnitsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('organizationControllerFindAllUnits', options)
];

export const organizationControllerFindAllUnitsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OrganizationService.organizationControllerFindAllUnits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerFindAllUnitsQueryKey(options)
    });
};

export const organizationControllerRemoveUnitMutation = (options?: Partial<OptionsLegacyParser<OrganizationControllerRemoveUnitData>>) => {
    const mutationOptions: UseMutationOptions<OrganizationControllerRemoveUnitResponse, AxiosError<OrganizationControllerRemoveUnitError>, OptionsLegacyParser<OrganizationControllerRemoveUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await OrganizationService.organizationControllerRemoveUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerUpdateUnitMutation = (options?: Partial<OptionsLegacyParser<OrganizationControllerUpdateUnitData>>) => {
    const mutationOptions: UseMutationOptions<OrganizationControllerUpdateUnitResponse, AxiosError<OrganizationControllerUpdateUnitError>, OptionsLegacyParser<OrganizationControllerUpdateUnitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await OrganizationService.organizationControllerUpdateUnit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const organizationControllerFindOneUnitQueryKey = (options: OptionsLegacyParser<OrganizationControllerFindOneUnitData>) => [
    createQueryKey('organizationControllerFindOneUnit', options)
];

export const organizationControllerFindOneUnitOptions = (options: OptionsLegacyParser<OrganizationControllerFindOneUnitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OrganizationService.organizationControllerFindOneUnit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: organizationControllerFindOneUnitQueryKey(options)
    });
};

export const syncEquipmentControllerGetHandoverLogsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('syncEquipmentControllerGetHandoverLogs', options)
];

export const syncEquipmentControllerGetHandoverLogsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerGetHandoverLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerGetHandoverLogsQueryKey(options)
    });
};

export const syncEquipmentControllerHandoverQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerHandoverData>) => [
    createQueryKey('syncEquipmentControllerHandover', options)
];

export const syncEquipmentControllerHandoverOptions = (options: OptionsLegacyParser<SyncEquipmentControllerHandoverData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerHandover({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerHandoverQueryKey(options)
    });
};

export const syncEquipmentControllerHandoverMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerHandoverData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerHandoverResponse, AxiosError<SyncEquipmentControllerHandoverError>, OptionsLegacyParser<SyncEquipmentControllerHandoverData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerHandover({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerGetMaintenanceLogsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('syncEquipmentControllerGetMaintenanceLogs', options)
];

export const syncEquipmentControllerGetMaintenanceLogsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerGetMaintenanceLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerGetMaintenanceLogsQueryKey(options)
    });
};

export const syncEquipmentControllerLogMaintenanceQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerLogMaintenanceData>) => [
    createQueryKey('syncEquipmentControllerLogMaintenance', options)
];

export const syncEquipmentControllerLogMaintenanceOptions = (options: OptionsLegacyParser<SyncEquipmentControllerLogMaintenanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerLogMaintenance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerLogMaintenanceQueryKey(options)
    });
};

export const syncEquipmentControllerLogMaintenanceMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerLogMaintenanceData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerLogMaintenanceResponse, AxiosError<SyncEquipmentControllerLogMaintenanceError>, OptionsLegacyParser<SyncEquipmentControllerLogMaintenanceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerLogMaintenance({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerGetLiquidationLogsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('syncEquipmentControllerGetLiquidationLogs', options)
];

export const syncEquipmentControllerGetLiquidationLogsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerGetLiquidationLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerGetLiquidationLogsQueryKey(options)
    });
};

export const syncEquipmentControllerLiquidateQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerLiquidateData>) => [
    createQueryKey('syncEquipmentControllerLiquidate', options)
];

export const syncEquipmentControllerLiquidateOptions = (options: OptionsLegacyParser<SyncEquipmentControllerLiquidateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerLiquidate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerLiquidateQueryKey(options)
    });
};

export const syncEquipmentControllerLiquidateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerLiquidateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerLiquidateResponse, AxiosError<SyncEquipmentControllerLiquidateError>, OptionsLegacyParser<SyncEquipmentControllerLiquidateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerLiquidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerCreateQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerCreateData>) => [
    createQueryKey('syncEquipmentControllerCreate', options)
];

export const syncEquipmentControllerCreateOptions = (options: OptionsLegacyParser<SyncEquipmentControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerCreateQueryKey(options)
    });
};

export const syncEquipmentControllerCreateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerCreateResponse, AxiosError<SyncEquipmentControllerCreateError>, OptionsLegacyParser<SyncEquipmentControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerFindAllQueryKey = (options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData>) => [
    createQueryKey('syncEquipmentControllerFindAll', options)
];

export const syncEquipmentControllerFindAllOptions = (options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindAllQueryKey(options)
    });
};

export const syncEquipmentControllerFindOneQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerFindOneData>) => [
    createQueryKey('syncEquipmentControllerFindOne', options)
];

export const syncEquipmentControllerFindOneOptions = (options: OptionsLegacyParser<SyncEquipmentControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindOneQueryKey(options)
    });
};

export const syncEquipmentControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerUpdateResponse, AxiosError<SyncEquipmentControllerUpdateError>, OptionsLegacyParser<SyncEquipmentControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerRemoveResponse, AxiosError<SyncEquipmentControllerRemoveError>, OptionsLegacyParser<SyncEquipmentControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerPerformInventoryQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerPerformInventoryData>) => [
    createQueryKey('syncEquipmentControllerPerformInventory', options)
];

export const syncEquipmentControllerPerformInventoryOptions = (options: OptionsLegacyParser<SyncEquipmentControllerPerformInventoryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerPerformInventory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerPerformInventoryQueryKey(options)
    });
};

export const syncEquipmentControllerPerformInventoryMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerPerformInventoryData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerPerformInventoryResponse, AxiosError<SyncEquipmentControllerPerformInventoryError>, OptionsLegacyParser<SyncEquipmentControllerPerformInventoryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SynchronousEquipmentService.syncEquipmentControllerPerformInventory({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userControllerCreateQueryKey = (options: OptionsLegacyParser<UserControllerCreateData>) => [
    createQueryKey('userControllerCreate', options)
];

export const userControllerCreateOptions = (options: OptionsLegacyParser<UserControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.userControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerCreateQueryKey(options)
    });
};

export const userControllerCreateMutation = (options?: Partial<OptionsLegacyParser<UserControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<UserControllerCreateResponse, AxiosError<UserControllerCreateError>, OptionsLegacyParser<UserControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UsersService.userControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userControllerGetAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('userControllerGetAll', options)
];

export const userControllerGetAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.userControllerGetAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetAllQueryKey(options)
    });
};

export const userControllerGetByIdQueryKey = (options: OptionsLegacyParser<UserControllerGetByIdData>) => [
    createQueryKey('userControllerGetById', options)
];

export const userControllerGetByIdOptions = (options: OptionsLegacyParser<UserControllerGetByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.userControllerGetById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userControllerGetByIdQueryKey(options)
    });
};

export const userControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<UserControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<UserControllerRemoveResponse, AxiosError<UserControllerRemoveError>, OptionsLegacyParser<UserControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UsersService.userControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<UserControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<UserControllerUpdateResponse, AxiosError<UserControllerUpdateError>, OptionsLegacyParser<UserControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UsersService.userControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};