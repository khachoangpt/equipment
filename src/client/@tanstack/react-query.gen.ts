// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, AppService, AssemblyEquipmentsComponentsService, AssemblyEquipmentsProductProfilesService, AuthService, CategoriesEquipmentGroupsService, CategoriesQualityLevelsService, CoreUnitsService, CoreUsersService, OperationsActivityLogsService, SyncEquipmentsCatalogService, SyncEquipmentsInstancesService } from '../sdk.gen';
import type { ComponentsControllerCreateData, ComponentsControllerCreateError, ComponentsControllerCreateResponse, ComponentsControllerFindOneData, ComponentsControllerUpdateData, ComponentsControllerUpdateError, ComponentsControllerUpdateResponse, ComponentsControllerRemoveData, ComponentsControllerRemoveError, ComponentsControllerRemoveResponse, ProductProfilesControllerCreateData, ProductProfilesControllerCreateError, ProductProfilesControllerCreateResponse, ProductProfilesControllerFindOneData, ProductProfilesControllerUpdateData, ProductProfilesControllerUpdateError, ProductProfilesControllerUpdateResponse, ProductProfilesControllerRemoveData, ProductProfilesControllerRemoveError, ProductProfilesControllerRemoveResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, EquipmentGroupsControllerCreateData, EquipmentGroupsControllerCreateError, EquipmentGroupsControllerCreateResponse, EquipmentGroupsControllerFindOneData, EquipmentGroupsControllerUpdateData, EquipmentGroupsControllerUpdateError, EquipmentGroupsControllerUpdateResponse, EquipmentGroupsControllerRemoveData, EquipmentGroupsControllerRemoveError, EquipmentGroupsControllerRemoveResponse, QualityLevelsControllerCreateData, QualityLevelsControllerCreateError, QualityLevelsControllerCreateResponse, QualityLevelsControllerFindOneData, QualityLevelsControllerUpdateData, QualityLevelsControllerUpdateError, QualityLevelsControllerUpdateResponse, QualityLevelsControllerRemoveData, QualityLevelsControllerRemoveError, QualityLevelsControllerRemoveResponse, UnitsControllerCreateData, UnitsControllerCreateError, UnitsControllerCreateResponse, UnitsControllerFindOneData, UnitsControllerUpdateData, UnitsControllerUpdateError, UnitsControllerUpdateResponse, UnitsControllerRemoveData, UnitsControllerRemoveError, UnitsControllerRemoveResponse, UsersControllerCreateData, UsersControllerCreateError, UsersControllerCreateResponse, UsersControllerFindOneData, UsersControllerUpdateData, UsersControllerUpdateError, UsersControllerUpdateResponse, UsersControllerRemoveData, UsersControllerRemoveError, UsersControllerRemoveResponse, ActivityLogsControllerSearchData, ActivityLogsControllerFindByInstanceData, SyncEquipmentControllerCreateData, SyncEquipmentControllerCreateError, SyncEquipmentControllerCreateResponse, SyncEquipmentControllerFindOneData, SyncEquipmentControllerUpdateData, SyncEquipmentControllerUpdateError, SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerRemoveData, SyncEquipmentControllerRemoveError, SyncEquipmentControllerRemoveResponse, EquipmentInstancesControllerCreateData, EquipmentInstancesControllerCreateError, EquipmentInstancesControllerCreateResponse, EquipmentInstancesControllerSearchData, EquipmentInstancesControllerFindOneData, EquipmentInstancesControllerUpdateData, EquipmentInstancesControllerUpdateError, EquipmentInstancesControllerUpdateResponse, EquipmentInstancesControllerRemoveData, EquipmentInstancesControllerRemoveError, EquipmentInstancesControllerRemoveResponse, EquipmentInstancesControllerHandoverData, EquipmentInstancesControllerHandoverError, EquipmentInstancesControllerHandoverResponse, EquipmentInstancesControllerRepairData, EquipmentInstancesControllerRepairError, EquipmentInstancesControllerRepairResponse, EquipmentInstancesControllerDisposeData, EquipmentInstancesControllerDisposeError, EquipmentInstancesControllerDisposeResponse } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const appControllerGetHelloQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('appControllerGetHello', options)
];

export const appControllerGetHelloOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AppService.appControllerGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHelloQueryKey(options)
    });
};

export const componentsControllerCreateQueryKey = (options: OptionsLegacyParser<ComponentsControllerCreateData>) => [
    createQueryKey('componentsControllerCreate', options)
];

export const componentsControllerCreateOptions = (options: OptionsLegacyParser<ComponentsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerCreateQueryKey(options)
    });
};

export const componentsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerCreateResponse, AxiosError<ComponentsControllerCreateError>, OptionsLegacyParser<ComponentsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const componentsControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('componentsControllerFindAll', options)
];

export const componentsControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerFindAllQueryKey(options)
    });
};

export const componentsControllerFindOneQueryKey = (options: OptionsLegacyParser<ComponentsControllerFindOneData>) => [
    createQueryKey('componentsControllerFindOne', options)
];

export const componentsControllerFindOneOptions = (options: OptionsLegacyParser<ComponentsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerFindOneQueryKey(options)
    });
};

export const componentsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerUpdateResponse, AxiosError<ComponentsControllerUpdateError>, OptionsLegacyParser<ComponentsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const componentsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerRemoveResponse, AxiosError<ComponentsControllerRemoveError>, OptionsLegacyParser<ComponentsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const productProfilesControllerCreateQueryKey = (options: OptionsLegacyParser<ProductProfilesControllerCreateData>) => [
    createQueryKey('productProfilesControllerCreate', options)
];

export const productProfilesControllerCreateOptions = (options: OptionsLegacyParser<ProductProfilesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerCreateQueryKey(options)
    });
};

export const productProfilesControllerCreateMutation = (options?: Partial<OptionsLegacyParser<ProductProfilesControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<ProductProfilesControllerCreateResponse, AxiosError<ProductProfilesControllerCreateError>, OptionsLegacyParser<ProductProfilesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const productProfilesControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('productProfilesControllerFindAll', options)
];

export const productProfilesControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerFindAllQueryKey(options)
    });
};

export const productProfilesControllerFindOneQueryKey = (options: OptionsLegacyParser<ProductProfilesControllerFindOneData>) => [
    createQueryKey('productProfilesControllerFindOne', options)
];

export const productProfilesControllerFindOneOptions = (options: OptionsLegacyParser<ProductProfilesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerFindOneQueryKey(options)
    });
};

export const productProfilesControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<ProductProfilesControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<ProductProfilesControllerUpdateResponse, AxiosError<ProductProfilesControllerUpdateError>, OptionsLegacyParser<ProductProfilesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const productProfilesControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<ProductProfilesControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<ProductProfilesControllerRemoveResponse, AxiosError<ProductProfilesControllerRemoveError>, OptionsLegacyParser<ProductProfilesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerLoginQueryKey = (options: OptionsLegacyParser<AuthControllerLoginData>) => [
    createQueryKey('authControllerLogin', options)
];

export const authControllerLoginOptions = (options: OptionsLegacyParser<AuthControllerLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AuthService.authControllerLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerLoginQueryKey(options)
    });
};

export const authControllerLoginMutation = (options?: Partial<OptionsLegacyParser<AuthControllerLoginData>>) => {
    const mutationOptions: UseMutationOptions<AuthControllerLoginResponse, AxiosError<AuthControllerLoginError>, OptionsLegacyParser<AuthControllerLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AuthService.authControllerLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentGroupsControllerCreateQueryKey = (options: OptionsLegacyParser<EquipmentGroupsControllerCreateData>) => [
    createQueryKey('equipmentGroupsControllerCreate', options)
];

export const equipmentGroupsControllerCreateOptions = (options: OptionsLegacyParser<EquipmentGroupsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerCreateQueryKey(options)
    });
};

export const equipmentGroupsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<EquipmentGroupsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentGroupsControllerCreateResponse, AxiosError<EquipmentGroupsControllerCreateError>, OptionsLegacyParser<EquipmentGroupsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentGroupsControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('equipmentGroupsControllerFindAll', options)
];

export const equipmentGroupsControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerFindAllQueryKey(options)
    });
};

export const equipmentGroupsControllerFindOneQueryKey = (options: OptionsLegacyParser<EquipmentGroupsControllerFindOneData>) => [
    createQueryKey('equipmentGroupsControllerFindOne', options)
];

export const equipmentGroupsControllerFindOneOptions = (options: OptionsLegacyParser<EquipmentGroupsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerFindOneQueryKey(options)
    });
};

export const equipmentGroupsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<EquipmentGroupsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentGroupsControllerUpdateResponse, AxiosError<EquipmentGroupsControllerUpdateError>, OptionsLegacyParser<EquipmentGroupsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentGroupsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<EquipmentGroupsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentGroupsControllerRemoveResponse, AxiosError<EquipmentGroupsControllerRemoveError>, OptionsLegacyParser<EquipmentGroupsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const qualityLevelsControllerCreateQueryKey = (options: OptionsLegacyParser<QualityLevelsControllerCreateData>) => [
    createQueryKey('qualityLevelsControllerCreate', options)
];

export const qualityLevelsControllerCreateOptions = (options: OptionsLegacyParser<QualityLevelsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerCreateQueryKey(options)
    });
};

export const qualityLevelsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<QualityLevelsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<QualityLevelsControllerCreateResponse, AxiosError<QualityLevelsControllerCreateError>, OptionsLegacyParser<QualityLevelsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const qualityLevelsControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('qualityLevelsControllerFindAll', options)
];

export const qualityLevelsControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerFindAllQueryKey(options)
    });
};

export const qualityLevelsControllerFindOneQueryKey = (options: OptionsLegacyParser<QualityLevelsControllerFindOneData>) => [
    createQueryKey('qualityLevelsControllerFindOne', options)
];

export const qualityLevelsControllerFindOneOptions = (options: OptionsLegacyParser<QualityLevelsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerFindOneQueryKey(options)
    });
};

export const qualityLevelsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<QualityLevelsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<QualityLevelsControllerUpdateResponse, AxiosError<QualityLevelsControllerUpdateError>, OptionsLegacyParser<QualityLevelsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const qualityLevelsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<QualityLevelsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<QualityLevelsControllerRemoveResponse, AxiosError<QualityLevelsControllerRemoveError>, OptionsLegacyParser<QualityLevelsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const unitsControllerCreateQueryKey = (options: OptionsLegacyParser<UnitsControllerCreateData>) => [
    createQueryKey('unitsControllerCreate', options)
];

export const unitsControllerCreateOptions = (options: OptionsLegacyParser<UnitsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUnitsService.unitsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerCreateQueryKey(options)
    });
};

export const unitsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<UnitsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<UnitsControllerCreateResponse, AxiosError<UnitsControllerCreateError>, OptionsLegacyParser<UnitsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUnitsService.unitsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const unitsControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('unitsControllerFindAll', options)
];

export const unitsControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUnitsService.unitsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerFindAllQueryKey(options)
    });
};

export const unitsControllerFindOneQueryKey = (options: OptionsLegacyParser<UnitsControllerFindOneData>) => [
    createQueryKey('unitsControllerFindOne', options)
];

export const unitsControllerFindOneOptions = (options: OptionsLegacyParser<UnitsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUnitsService.unitsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerFindOneQueryKey(options)
    });
};

export const unitsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<UnitsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<UnitsControllerUpdateResponse, AxiosError<UnitsControllerUpdateError>, OptionsLegacyParser<UnitsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUnitsService.unitsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const unitsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<UnitsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<UnitsControllerRemoveResponse, AxiosError<UnitsControllerRemoveError>, OptionsLegacyParser<UnitsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUnitsService.unitsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerCreateQueryKey = (options: OptionsLegacyParser<UsersControllerCreateData>) => [
    createQueryKey('usersControllerCreate', options)
];

export const usersControllerCreateOptions = (options: OptionsLegacyParser<UsersControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUsersService.usersControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateQueryKey(options)
    });
};

export const usersControllerCreateMutation = (options?: Partial<OptionsLegacyParser<UsersControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateResponse, AxiosError<UsersControllerCreateError>, OptionsLegacyParser<UsersControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUsersService.usersControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('usersControllerFindAll', options)
];

export const usersControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUsersService.usersControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllQueryKey(options)
    });
};

export const usersControllerFindOneQueryKey = (options: OptionsLegacyParser<UsersControllerFindOneData>) => [
    createQueryKey('usersControllerFindOne', options)
];

export const usersControllerFindOneOptions = (options: OptionsLegacyParser<UsersControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUsersService.usersControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindOneQueryKey(options)
    });
};

export const usersControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<UsersControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateResponse, AxiosError<UsersControllerUpdateError>, OptionsLegacyParser<UsersControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUsersService.usersControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<UsersControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerRemoveResponse, AxiosError<UsersControllerRemoveError>, OptionsLegacyParser<UsersControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUsersService.usersControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const activityLogsControllerSearchQueryKey = (options: OptionsLegacyParser<ActivityLogsControllerSearchData>) => [
    createQueryKey('activityLogsControllerSearch', options)
];

export const activityLogsControllerSearchOptions = (options: OptionsLegacyParser<ActivityLogsControllerSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OperationsActivityLogsService.activityLogsControllerSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogsControllerSearchQueryKey(options)
    });
};

export const activityLogsControllerFindByInstanceQueryKey = (options: OptionsLegacyParser<ActivityLogsControllerFindByInstanceData>) => [
    createQueryKey('activityLogsControllerFindByInstance', options)
];

export const activityLogsControllerFindByInstanceOptions = (options: OptionsLegacyParser<ActivityLogsControllerFindByInstanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OperationsActivityLogsService.activityLogsControllerFindByInstance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogsControllerFindByInstanceQueryKey(options)
    });
};

export const syncEquipmentControllerCreateQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerCreateData>) => [
    createQueryKey('syncEquipmentControllerCreate', options)
];

export const syncEquipmentControllerCreateOptions = (options: OptionsLegacyParser<SyncEquipmentControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerCreateQueryKey(options)
    });
};

export const syncEquipmentControllerCreateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerCreateResponse, AxiosError<SyncEquipmentControllerCreateError>, OptionsLegacyParser<SyncEquipmentControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('syncEquipmentControllerFindAll', options)
];

export const syncEquipmentControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindAllQueryKey(options)
    });
};

export const syncEquipmentControllerFindOneQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerFindOneData>) => [
    createQueryKey('syncEquipmentControllerFindOne', options)
];

export const syncEquipmentControllerFindOneOptions = (options: OptionsLegacyParser<SyncEquipmentControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindOneQueryKey(options)
    });
};

export const syncEquipmentControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerUpdateResponse, AxiosError<SyncEquipmentControllerUpdateError>, OptionsLegacyParser<SyncEquipmentControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerRemoveResponse, AxiosError<SyncEquipmentControllerRemoveError>, OptionsLegacyParser<SyncEquipmentControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerCreateQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerCreateData>) => [
    createQueryKey('equipmentInstancesControllerCreate', options)
];

export const equipmentInstancesControllerCreateOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerCreateQueryKey(options)
    });
};

export const equipmentInstancesControllerCreateMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerCreateResponse, AxiosError<EquipmentInstancesControllerCreateError>, OptionsLegacyParser<EquipmentInstancesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerSearchQueryKey = (options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData>) => [
    createQueryKey('equipmentInstancesControllerSearch', options)
];

export const equipmentInstancesControllerSearchOptions = (options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerSearchQueryKey(options)
    });
};

export const equipmentInstancesControllerFindOneQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerFindOneData>) => [
    createQueryKey('equipmentInstancesControllerFindOne', options)
];

export const equipmentInstancesControllerFindOneOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerFindOneQueryKey(options)
    });
};

export const equipmentInstancesControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerUpdateResponse, AxiosError<EquipmentInstancesControllerUpdateError>, OptionsLegacyParser<EquipmentInstancesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerRemoveResponse, AxiosError<EquipmentInstancesControllerRemoveError>, OptionsLegacyParser<EquipmentInstancesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerHandoverQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerHandoverData>) => [
    createQueryKey('equipmentInstancesControllerHandover', options)
];

export const equipmentInstancesControllerHandoverOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerHandoverData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerHandover({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerHandoverQueryKey(options)
    });
};

export const equipmentInstancesControllerHandoverMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerHandoverData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerHandoverResponse, AxiosError<EquipmentInstancesControllerHandoverError>, OptionsLegacyParser<EquipmentInstancesControllerHandoverData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerHandover({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerRepairQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerRepairData>) => [
    createQueryKey('equipmentInstancesControllerRepair', options)
];

export const equipmentInstancesControllerRepairOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerRepairData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerRepair({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerRepairQueryKey(options)
    });
};

export const equipmentInstancesControllerRepairMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerRepairData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerRepairResponse, AxiosError<EquipmentInstancesControllerRepairError>, OptionsLegacyParser<EquipmentInstancesControllerRepairData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerRepair({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerDisposeQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerDisposeData>) => [
    createQueryKey('equipmentInstancesControllerDispose', options)
];

export const equipmentInstancesControllerDisposeOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerDisposeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerDispose({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerDisposeQueryKey(options)
    });
};

export const equipmentInstancesControllerDisposeMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerDisposeData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerDisposeResponse, AxiosError<EquipmentInstancesControllerDisposeError>, OptionsLegacyParser<EquipmentInstancesControllerDisposeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerDispose({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};