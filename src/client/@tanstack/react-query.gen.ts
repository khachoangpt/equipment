// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import { client, AppService, AssemblyEquipmentsComponentsService, AssemblyEquipmentsProductProfilesService, AuthService, CategoriesEquipmentGroupsService, CategoriesQualityLevelsService, CoreUnitsService, CoreUsersService, OperationsActivityLogsService, SyncEquipmentsCatalogService, SyncEquipmentsInstancesService } from '../sdk.gen';
import type { ComponentsControllerCreateData, ComponentsControllerCreateError, ComponentsControllerCreateResponse, ComponentsControllerFindAllData, ComponentsControllerFindAllError, ComponentsControllerFindAllResponse, ComponentsControllerUploadFilesData, ComponentsControllerUploadFilesError, ComponentsControllerUploadFilesResponse, ComponentsControllerGetImageData, ComponentsControllerFindOneData, ComponentsControllerUpdateData, ComponentsControllerUpdateError, ComponentsControllerUpdateResponse, ComponentsControllerRemoveData, ComponentsControllerRemoveError, ComponentsControllerRemoveResponse, ComponentsControllerAddComponentStockData, ComponentsControllerAddComponentStockError, ComponentsControllerAddComponentStockResponse, AssembledEquipmentControllerCreateConfigData, AssembledEquipmentControllerCreateConfigError, AssembledEquipmentControllerCreateConfigResponse, AssembledEquipmentControllerFindAllConfigsData, AssembledEquipmentControllerFindAllConfigsError, AssembledEquipmentControllerFindAllConfigsResponse, AssembledEquipmentControllerUploadFilesData, AssembledEquipmentControllerUploadFilesError, AssembledEquipmentControllerUploadFilesResponse, AssembledEquipmentControllerGetImageData, AssembledEquipmentControllerFindConfigByIdData, AssembledEquipmentControllerUpdateConfigData, AssembledEquipmentControllerUpdateConfigError, AssembledEquipmentControllerUpdateConfigResponse, AssembledEquipmentControllerRemoveConfigData, AssembledEquipmentControllerRemoveConfigError, AssembledEquipmentControllerRemoveConfigResponse, AssembledEquipmentControllerCheckBuildAvailabilityData, AssembledEquipmentControllerCheckBuildAvailabilityError, AssembledEquipmentControllerCheckBuildAvailabilityResponse, AssembledEquipmentControllerCreateBuildActivityData, AssembledEquipmentControllerCreateBuildActivityError, AssembledEquipmentControllerCreateBuildActivityResponse, AssembledEquipmentControllerFindAllBuildActivitiesData, AssembledEquipmentControllerFindAllBuildActivitiesError, AssembledEquipmentControllerFindAllBuildActivitiesResponse, AssembledEquipmentControllerFindbuildActivityByIdData, AssembledEquipmentControllerUpdateBuildActivityData, AssembledEquipmentControllerUpdateBuildActivityError, AssembledEquipmentControllerUpdateBuildActivityResponse, AssembledEquipmentControllerRemoveBuildActivityData, AssembledEquipmentControllerRemoveBuildActivityError, AssembledEquipmentControllerRemoveBuildActivityResponse, SettingsControllerCreateData, SettingsControllerCreateError, SettingsControllerCreateResponse, SettingsControllerFindOneData, SettingsControllerUpdateData, SettingsControllerUpdateError, SettingsControllerUpdateResponse, ProductProfilesControllerCreateData, ProductProfilesControllerCreateError, ProductProfilesControllerCreateResponse, ProductProfilesControllerFindAllData, ProductProfilesControllerFindAllError, ProductProfilesControllerFindAllResponse, ProductProfilesControllerFindOneData, ProductProfilesControllerUpdateData, ProductProfilesControllerUpdateError, ProductProfilesControllerUpdateResponse, ProductProfilesControllerRemoveData, ProductProfilesControllerRemoveError, ProductProfilesControllerRemoveResponse, AuthControllerLoginData, AuthControllerLoginError, AuthControllerLoginResponse, EquipmentGroupsControllerCreateData, EquipmentGroupsControllerCreateError, EquipmentGroupsControllerCreateResponse, EquipmentGroupsControllerFindAllData, EquipmentGroupsControllerFindAllError, EquipmentGroupsControllerFindAllResponse, EquipmentGroupsControllerFindOneData, EquipmentGroupsControllerUpdateData, EquipmentGroupsControllerUpdateError, EquipmentGroupsControllerUpdateResponse, EquipmentGroupsControllerRemoveData, EquipmentGroupsControllerRemoveError, EquipmentGroupsControllerRemoveResponse, QualityLevelsControllerCreateData, QualityLevelsControllerCreateError, QualityLevelsControllerCreateResponse, QualityLevelsControllerFindAllData, QualityLevelsControllerFindAllError, QualityLevelsControllerFindAllResponse, QualityLevelsControllerFindOneData, QualityLevelsControllerUpdateData, QualityLevelsControllerUpdateError, QualityLevelsControllerUpdateResponse, QualityLevelsControllerRemoveData, QualityLevelsControllerRemoveError, QualityLevelsControllerRemoveResponse, UnitsControllerCreateData, UnitsControllerCreateError, UnitsControllerCreateResponse, UnitsControllerFindAllData, UnitsControllerFindAllError, UnitsControllerFindAllResponse, UnitsControllerFindOneData, UnitsControllerUpdateData, UnitsControllerUpdateError, UnitsControllerUpdateResponse, UnitsControllerRemoveData, UnitsControllerRemoveError, UnitsControllerRemoveResponse, UsersControllerCreateData, UsersControllerCreateError, UsersControllerCreateResponse, UsersControllerFindOneData, UsersControllerUpdateData, UsersControllerUpdateError, UsersControllerUpdateResponse, UsersControllerRemoveData, UsersControllerRemoveError, UsersControllerRemoveResponse, ActivityLogsControllerSearchData, ActivityLogsControllerSearchError, ActivityLogsControllerSearchResponse, ActivityLogsControllerFindByInstanceData, SyncEquipmentControllerCreateData, SyncEquipmentControllerCreateError, SyncEquipmentControllerCreateResponse, SyncEquipmentControllerFindAllData, SyncEquipmentControllerFindAllError, SyncEquipmentControllerFindAllResponse, SyncEquipmentControllerFindOneData, SyncEquipmentControllerUpdateData, SyncEquipmentControllerUpdateError, SyncEquipmentControllerUpdateResponse, SyncEquipmentControllerRemoveData, SyncEquipmentControllerRemoveError, SyncEquipmentControllerRemoveResponse, EquipmentInstancesControllerCreateData, EquipmentInstancesControllerCreateError, EquipmentInstancesControllerCreateResponse, EquipmentInstancesControllerUploadFilesData, EquipmentInstancesControllerUploadFilesError, EquipmentInstancesControllerUploadFilesResponse, EquipmentInstancesControllerGetImageData, EquipmentInstancesControllerSearchData, EquipmentInstancesControllerSearchError, EquipmentInstancesControllerSearchResponse, EquipmentInstancesControllerFindOneData, EquipmentInstancesControllerUpdateData, EquipmentInstancesControllerUpdateError, EquipmentInstancesControllerUpdateResponse, EquipmentInstancesControllerRemoveData, EquipmentInstancesControllerRemoveError, EquipmentInstancesControllerRemoveResponse, EquipmentInstancesControllerHandoverData, EquipmentInstancesControllerHandoverError, EquipmentInstancesControllerHandoverResponse, EquipmentInstancesControllerRepairData, EquipmentInstancesControllerRepairError, EquipmentInstancesControllerRepairResponse, EquipmentInstancesControllerDisposeData, EquipmentInstancesControllerDisposeError, EquipmentInstancesControllerDisposeResponse } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const appControllerGetHelloQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('appControllerGetHello', options)
];

export const appControllerGetHelloOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AppService.appControllerGetHello({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appControllerGetHelloQueryKey(options)
    });
};

export const componentsControllerCreateQueryKey = (options: OptionsLegacyParser<ComponentsControllerCreateData>) => [
    createQueryKey('componentsControllerCreate', options)
];

export const componentsControllerCreateOptions = (options: OptionsLegacyParser<ComponentsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerCreateQueryKey(options)
    });
};

export const componentsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerCreateResponse, AxiosError<ComponentsControllerCreateError>, OptionsLegacyParser<ComponentsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const componentsControllerFindAllQueryKey = (options?: OptionsLegacyParser<ComponentsControllerFindAllData>) => [
    createQueryKey('componentsControllerFindAll', options)
];

export const componentsControllerFindAllOptions = (options?: OptionsLegacyParser<ComponentsControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerFindAllQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<OptionsLegacyParser>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<OptionsLegacyParser>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const componentsControllerFindAllInfiniteQueryKey = (options?: OptionsLegacyParser<ComponentsControllerFindAllData>): QueryKey<OptionsLegacyParser<ComponentsControllerFindAllData>> => [
    createQueryKey('componentsControllerFindAll', options, true)
];

export const componentsControllerFindAllInfiniteOptions = (options?: OptionsLegacyParser<ComponentsControllerFindAllData>) => {
    return infiniteQueryOptions<ComponentsControllerFindAllResponse, AxiosError<ComponentsControllerFindAllError>, InfiniteData<ComponentsControllerFindAllResponse>, QueryKey<OptionsLegacyParser<ComponentsControllerFindAllData>>, number | Pick<QueryKey<OptionsLegacyParser<ComponentsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<ComponentsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerFindAllInfiniteQueryKey(options)
    });
};

export const componentsControllerUploadFilesQueryKey = (options: OptionsLegacyParser<ComponentsControllerUploadFilesData>) => [
    createQueryKey('componentsControllerUploadFiles', options)
];

export const componentsControllerUploadFilesOptions = (options: OptionsLegacyParser<ComponentsControllerUploadFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerUploadFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerUploadFilesQueryKey(options)
    });
};

export const componentsControllerUploadFilesMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerUploadFilesData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerUploadFilesResponse, AxiosError<ComponentsControllerUploadFilesError>, OptionsLegacyParser<ComponentsControllerUploadFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerUploadFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const componentsControllerGetImageQueryKey = (options: OptionsLegacyParser<ComponentsControllerGetImageData>) => [
    createQueryKey('componentsControllerGetImage', options)
];

export const componentsControllerGetImageOptions = (options: OptionsLegacyParser<ComponentsControllerGetImageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerGetImage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerGetImageQueryKey(options)
    });
};

export const componentsControllerFindOneQueryKey = (options: OptionsLegacyParser<ComponentsControllerFindOneData>) => [
    createQueryKey('componentsControllerFindOne', options)
];

export const componentsControllerFindOneOptions = (options: OptionsLegacyParser<ComponentsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerFindOneQueryKey(options)
    });
};

export const componentsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerUpdateResponse, AxiosError<ComponentsControllerUpdateError>, OptionsLegacyParser<ComponentsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const componentsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerRemoveResponse, AxiosError<ComponentsControllerRemoveError>, OptionsLegacyParser<ComponentsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const componentsControllerAddComponentStockQueryKey = (options: OptionsLegacyParser<ComponentsControllerAddComponentStockData>) => [
    createQueryKey('componentsControllerAddComponentStock', options)
];

export const componentsControllerAddComponentStockOptions = (options: OptionsLegacyParser<ComponentsControllerAddComponentStockData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerAddComponentStock({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: componentsControllerAddComponentStockQueryKey(options)
    });
};

export const componentsControllerAddComponentStockMutation = (options?: Partial<OptionsLegacyParser<ComponentsControllerAddComponentStockData>>) => {
    const mutationOptions: UseMutationOptions<ComponentsControllerAddComponentStockResponse, AxiosError<ComponentsControllerAddComponentStockError>, OptionsLegacyParser<ComponentsControllerAddComponentStockData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.componentsControllerAddComponentStock({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerCreateConfigQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateConfigData>) => [
    createQueryKey('assembledEquipmentControllerCreateConfig', options)
];

export const assembledEquipmentControllerCreateConfigOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerCreateConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerCreateConfigQueryKey(options)
    });
};

export const assembledEquipmentControllerCreateConfigMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerCreateConfigData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerCreateConfigResponse, AxiosError<AssembledEquipmentControllerCreateConfigError>, OptionsLegacyParser<AssembledEquipmentControllerCreateConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerCreateConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerFindAllConfigsQueryKey = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>) => [
    createQueryKey('assembledEquipmentControllerFindAllConfigs', options)
];

export const assembledEquipmentControllerFindAllConfigsOptions = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerFindAllConfigs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindAllConfigsQueryKey(options)
    });
};

export const assembledEquipmentControllerFindAllConfigsInfiniteQueryKey = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>): QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>> => [
    createQueryKey('assembledEquipmentControllerFindAllConfigs', options, true)
];

export const assembledEquipmentControllerFindAllConfigsInfiniteOptions = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>) => {
    return infiniteQueryOptions<AssembledEquipmentControllerFindAllConfigsResponse, AxiosError<AssembledEquipmentControllerFindAllConfigsError>, InfiniteData<AssembledEquipmentControllerFindAllConfigsResponse>, QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>>, number | Pick<QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllConfigsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerFindAllConfigs({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindAllConfigsInfiniteQueryKey(options)
    });
};

export const assembledEquipmentControllerUploadFilesQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerUploadFilesData>) => [
    createQueryKey('assembledEquipmentControllerUploadFiles', options)
];

export const assembledEquipmentControllerUploadFilesOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerUploadFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerUploadFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerUploadFilesQueryKey(options)
    });
};

export const assembledEquipmentControllerUploadFilesMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerUploadFilesData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerUploadFilesResponse, AxiosError<AssembledEquipmentControllerUploadFilesError>, OptionsLegacyParser<AssembledEquipmentControllerUploadFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerUploadFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerGetImageQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerGetImageData>) => [
    createQueryKey('assembledEquipmentControllerGetImage', options)
];

export const assembledEquipmentControllerGetImageOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerGetImageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerGetImage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerGetImageQueryKey(options)
    });
};

export const assembledEquipmentControllerFindConfigByIdQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerFindConfigByIdData>) => [
    createQueryKey('assembledEquipmentControllerFindConfigById', options)
];

export const assembledEquipmentControllerFindConfigByIdOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerFindConfigByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerFindConfigById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindConfigByIdQueryKey(options)
    });
};

export const assembledEquipmentControllerUpdateConfigMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerUpdateConfigData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerUpdateConfigResponse, AxiosError<AssembledEquipmentControllerUpdateConfigError>, OptionsLegacyParser<AssembledEquipmentControllerUpdateConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerUpdateConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerRemoveConfigMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerRemoveConfigData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerRemoveConfigResponse, AxiosError<AssembledEquipmentControllerRemoveConfigError>, OptionsLegacyParser<AssembledEquipmentControllerRemoveConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerRemoveConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerCheckBuildAvailabilityQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerCheckBuildAvailabilityData>) => [
    createQueryKey('assembledEquipmentControllerCheckBuildAvailability', options)
];

export const assembledEquipmentControllerCheckBuildAvailabilityOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerCheckBuildAvailabilityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerCheckBuildAvailability({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerCheckBuildAvailabilityQueryKey(options)
    });
};

export const assembledEquipmentControllerCheckBuildAvailabilityMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerCheckBuildAvailabilityData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerCheckBuildAvailabilityResponse, AxiosError<AssembledEquipmentControllerCheckBuildAvailabilityError>, OptionsLegacyParser<AssembledEquipmentControllerCheckBuildAvailabilityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerCheckBuildAvailability({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerCreateBuildActivityQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateBuildActivityData>) => [
    createQueryKey('assembledEquipmentControllerCreateBuildActivity', options)
];

export const assembledEquipmentControllerCreateBuildActivityOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerCreateBuildActivityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerCreateBuildActivity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerCreateBuildActivityQueryKey(options)
    });
};

export const assembledEquipmentControllerCreateBuildActivityMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerCreateBuildActivityData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerCreateBuildActivityResponse, AxiosError<AssembledEquipmentControllerCreateBuildActivityError>, OptionsLegacyParser<AssembledEquipmentControllerCreateBuildActivityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerCreateBuildActivity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerFindAllBuildActivitiesQueryKey = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>) => [
    createQueryKey('assembledEquipmentControllerFindAllBuildActivities', options)
];

export const assembledEquipmentControllerFindAllBuildActivitiesOptions = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerFindAllBuildActivities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindAllBuildActivitiesQueryKey(options)
    });
};

export const assembledEquipmentControllerFindAllBuildActivitiesInfiniteQueryKey = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>): QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>> => [
    createQueryKey('assembledEquipmentControllerFindAllBuildActivities', options, true)
];

export const assembledEquipmentControllerFindAllBuildActivitiesInfiniteOptions = (options?: OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>) => {
    return infiniteQueryOptions<AssembledEquipmentControllerFindAllBuildActivitiesResponse, AxiosError<AssembledEquipmentControllerFindAllBuildActivitiesError>, InfiniteData<AssembledEquipmentControllerFindAllBuildActivitiesResponse>, QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>>, number | Pick<QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<AssembledEquipmentControllerFindAllBuildActivitiesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerFindAllBuildActivities({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindAllBuildActivitiesInfiniteQueryKey(options)
    });
};

export const assembledEquipmentControllerFindbuildActivityByIdQueryKey = (options: OptionsLegacyParser<AssembledEquipmentControllerFindbuildActivityByIdData>) => [
    createQueryKey('assembledEquipmentControllerFindbuildActivityById', options)
];

export const assembledEquipmentControllerFindbuildActivityByIdOptions = (options: OptionsLegacyParser<AssembledEquipmentControllerFindbuildActivityByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerFindbuildActivityById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: assembledEquipmentControllerFindbuildActivityByIdQueryKey(options)
    });
};

export const assembledEquipmentControllerUpdateBuildActivityMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerUpdateBuildActivityData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerUpdateBuildActivityResponse, AxiosError<AssembledEquipmentControllerUpdateBuildActivityError>, OptionsLegacyParser<AssembledEquipmentControllerUpdateBuildActivityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerUpdateBuildActivity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const assembledEquipmentControllerRemoveBuildActivityMutation = (options?: Partial<OptionsLegacyParser<AssembledEquipmentControllerRemoveBuildActivityData>>) => {
    const mutationOptions: UseMutationOptions<AssembledEquipmentControllerRemoveBuildActivityResponse, AxiosError<AssembledEquipmentControllerRemoveBuildActivityError>, OptionsLegacyParser<AssembledEquipmentControllerRemoveBuildActivityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.assembledEquipmentControllerRemoveBuildActivity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsControllerCreateQueryKey = (options: OptionsLegacyParser<SettingsControllerCreateData>) => [
    createQueryKey('settingsControllerCreate', options)
];

export const settingsControllerCreateOptions = (options: OptionsLegacyParser<SettingsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.settingsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: settingsControllerCreateQueryKey(options)
    });
};

export const settingsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<SettingsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<SettingsControllerCreateResponse, AxiosError<SettingsControllerCreateError>, OptionsLegacyParser<SettingsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.settingsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const settingsControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('settingsControllerFindAll', options)
];

export const settingsControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.settingsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: settingsControllerFindAllQueryKey(options)
    });
};

export const settingsControllerFindOneQueryKey = (options: OptionsLegacyParser<SettingsControllerFindOneData>) => [
    createQueryKey('settingsControllerFindOne', options)
];

export const settingsControllerFindOneOptions = (options: OptionsLegacyParser<SettingsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsComponentsService.settingsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: settingsControllerFindOneQueryKey(options)
    });
};

export const settingsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<SettingsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<SettingsControllerUpdateResponse, AxiosError<SettingsControllerUpdateError>, OptionsLegacyParser<SettingsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsComponentsService.settingsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const productProfilesControllerCreateQueryKey = (options: OptionsLegacyParser<ProductProfilesControllerCreateData>) => [
    createQueryKey('productProfilesControllerCreate', options)
];

export const productProfilesControllerCreateOptions = (options: OptionsLegacyParser<ProductProfilesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerCreateQueryKey(options)
    });
};

export const productProfilesControllerCreateMutation = (options?: Partial<OptionsLegacyParser<ProductProfilesControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<ProductProfilesControllerCreateResponse, AxiosError<ProductProfilesControllerCreateError>, OptionsLegacyParser<ProductProfilesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const productProfilesControllerFindAllQueryKey = (options?: OptionsLegacyParser<ProductProfilesControllerFindAllData>) => [
    createQueryKey('productProfilesControllerFindAll', options)
];

export const productProfilesControllerFindAllOptions = (options?: OptionsLegacyParser<ProductProfilesControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerFindAllQueryKey(options)
    });
};

export const productProfilesControllerFindAllInfiniteQueryKey = (options?: OptionsLegacyParser<ProductProfilesControllerFindAllData>): QueryKey<OptionsLegacyParser<ProductProfilesControllerFindAllData>> => [
    createQueryKey('productProfilesControllerFindAll', options, true)
];

export const productProfilesControllerFindAllInfiniteOptions = (options?: OptionsLegacyParser<ProductProfilesControllerFindAllData>) => {
    return infiniteQueryOptions<ProductProfilesControllerFindAllResponse, AxiosError<ProductProfilesControllerFindAllError>, InfiniteData<ProductProfilesControllerFindAllResponse>, QueryKey<OptionsLegacyParser<ProductProfilesControllerFindAllData>>, number | Pick<QueryKey<OptionsLegacyParser<ProductProfilesControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<ProductProfilesControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerFindAllInfiniteQueryKey(options)
    });
};

export const productProfilesControllerFindOneQueryKey = (options: OptionsLegacyParser<ProductProfilesControllerFindOneData>) => [
    createQueryKey('productProfilesControllerFindOne', options)
];

export const productProfilesControllerFindOneOptions = (options: OptionsLegacyParser<ProductProfilesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: productProfilesControllerFindOneQueryKey(options)
    });
};

export const productProfilesControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<ProductProfilesControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<ProductProfilesControllerUpdateResponse, AxiosError<ProductProfilesControllerUpdateError>, OptionsLegacyParser<ProductProfilesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const productProfilesControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<ProductProfilesControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<ProductProfilesControllerRemoveResponse, AxiosError<ProductProfilesControllerRemoveError>, OptionsLegacyParser<ProductProfilesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AssemblyEquipmentsProductProfilesService.productProfilesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const authControllerLoginQueryKey = (options: OptionsLegacyParser<AuthControllerLoginData>) => [
    createQueryKey('authControllerLogin', options)
];

export const authControllerLoginOptions = (options: OptionsLegacyParser<AuthControllerLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AuthService.authControllerLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerLoginQueryKey(options)
    });
};

export const authControllerLoginMutation = (options?: Partial<OptionsLegacyParser<AuthControllerLoginData>>) => {
    const mutationOptions: UseMutationOptions<AuthControllerLoginResponse, AxiosError<AuthControllerLoginError>, OptionsLegacyParser<AuthControllerLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AuthService.authControllerLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentGroupsControllerCreateQueryKey = (options: OptionsLegacyParser<EquipmentGroupsControllerCreateData>) => [
    createQueryKey('equipmentGroupsControllerCreate', options)
];

export const equipmentGroupsControllerCreateOptions = (options: OptionsLegacyParser<EquipmentGroupsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerCreateQueryKey(options)
    });
};

export const equipmentGroupsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<EquipmentGroupsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentGroupsControllerCreateResponse, AxiosError<EquipmentGroupsControllerCreateError>, OptionsLegacyParser<EquipmentGroupsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentGroupsControllerFindAllQueryKey = (options?: OptionsLegacyParser<EquipmentGroupsControllerFindAllData>) => [
    createQueryKey('equipmentGroupsControllerFindAll', options)
];

export const equipmentGroupsControllerFindAllOptions = (options?: OptionsLegacyParser<EquipmentGroupsControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerFindAllQueryKey(options)
    });
};

export const equipmentGroupsControllerFindAllInfiniteQueryKey = (options?: OptionsLegacyParser<EquipmentGroupsControllerFindAllData>): QueryKey<OptionsLegacyParser<EquipmentGroupsControllerFindAllData>> => [
    createQueryKey('equipmentGroupsControllerFindAll', options, true)
];

export const equipmentGroupsControllerFindAllInfiniteOptions = (options?: OptionsLegacyParser<EquipmentGroupsControllerFindAllData>) => {
    return infiniteQueryOptions<EquipmentGroupsControllerFindAllResponse, AxiosError<EquipmentGroupsControllerFindAllError>, InfiniteData<EquipmentGroupsControllerFindAllResponse>, QueryKey<OptionsLegacyParser<EquipmentGroupsControllerFindAllData>>, number | Pick<QueryKey<OptionsLegacyParser<EquipmentGroupsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<EquipmentGroupsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerFindAllInfiniteQueryKey(options)
    });
};

export const equipmentGroupsControllerFindOneQueryKey = (options: OptionsLegacyParser<EquipmentGroupsControllerFindOneData>) => [
    createQueryKey('equipmentGroupsControllerFindOne', options)
];

export const equipmentGroupsControllerFindOneOptions = (options: OptionsLegacyParser<EquipmentGroupsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentGroupsControllerFindOneQueryKey(options)
    });
};

export const equipmentGroupsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<EquipmentGroupsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentGroupsControllerUpdateResponse, AxiosError<EquipmentGroupsControllerUpdateError>, OptionsLegacyParser<EquipmentGroupsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentGroupsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<EquipmentGroupsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentGroupsControllerRemoveResponse, AxiosError<EquipmentGroupsControllerRemoveError>, OptionsLegacyParser<EquipmentGroupsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesEquipmentGroupsService.equipmentGroupsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const qualityLevelsControllerCreateQueryKey = (options: OptionsLegacyParser<QualityLevelsControllerCreateData>) => [
    createQueryKey('qualityLevelsControllerCreate', options)
];

export const qualityLevelsControllerCreateOptions = (options: OptionsLegacyParser<QualityLevelsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerCreateQueryKey(options)
    });
};

export const qualityLevelsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<QualityLevelsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<QualityLevelsControllerCreateResponse, AxiosError<QualityLevelsControllerCreateError>, OptionsLegacyParser<QualityLevelsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const qualityLevelsControllerFindAllQueryKey = (options?: OptionsLegacyParser<QualityLevelsControllerFindAllData>) => [
    createQueryKey('qualityLevelsControllerFindAll', options)
];

export const qualityLevelsControllerFindAllOptions = (options?: OptionsLegacyParser<QualityLevelsControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerFindAllQueryKey(options)
    });
};

export const qualityLevelsControllerFindAllInfiniteQueryKey = (options?: OptionsLegacyParser<QualityLevelsControllerFindAllData>): QueryKey<OptionsLegacyParser<QualityLevelsControllerFindAllData>> => [
    createQueryKey('qualityLevelsControllerFindAll', options, true)
];

export const qualityLevelsControllerFindAllInfiniteOptions = (options?: OptionsLegacyParser<QualityLevelsControllerFindAllData>) => {
    return infiniteQueryOptions<QualityLevelsControllerFindAllResponse, AxiosError<QualityLevelsControllerFindAllError>, InfiniteData<QualityLevelsControllerFindAllResponse>, QueryKey<OptionsLegacyParser<QualityLevelsControllerFindAllData>>, number | Pick<QueryKey<OptionsLegacyParser<QualityLevelsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<QualityLevelsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerFindAllInfiniteQueryKey(options)
    });
};

export const qualityLevelsControllerFindOneQueryKey = (options: OptionsLegacyParser<QualityLevelsControllerFindOneData>) => [
    createQueryKey('qualityLevelsControllerFindOne', options)
];

export const qualityLevelsControllerFindOneOptions = (options: OptionsLegacyParser<QualityLevelsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: qualityLevelsControllerFindOneQueryKey(options)
    });
};

export const qualityLevelsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<QualityLevelsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<QualityLevelsControllerUpdateResponse, AxiosError<QualityLevelsControllerUpdateError>, OptionsLegacyParser<QualityLevelsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const qualityLevelsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<QualityLevelsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<QualityLevelsControllerRemoveResponse, AxiosError<QualityLevelsControllerRemoveError>, OptionsLegacyParser<QualityLevelsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CategoriesQualityLevelsService.qualityLevelsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const unitsControllerCreateQueryKey = (options: OptionsLegacyParser<UnitsControllerCreateData>) => [
    createQueryKey('unitsControllerCreate', options)
];

export const unitsControllerCreateOptions = (options: OptionsLegacyParser<UnitsControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUnitsService.unitsControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerCreateQueryKey(options)
    });
};

export const unitsControllerCreateMutation = (options?: Partial<OptionsLegacyParser<UnitsControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<UnitsControllerCreateResponse, AxiosError<UnitsControllerCreateError>, OptionsLegacyParser<UnitsControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUnitsService.unitsControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const unitsControllerFindAllQueryKey = (options?: OptionsLegacyParser<UnitsControllerFindAllData>) => [
    createQueryKey('unitsControllerFindAll', options)
];

export const unitsControllerFindAllOptions = (options?: OptionsLegacyParser<UnitsControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUnitsService.unitsControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerFindAllQueryKey(options)
    });
};

export const unitsControllerFindAllInfiniteQueryKey = (options?: OptionsLegacyParser<UnitsControllerFindAllData>): QueryKey<OptionsLegacyParser<UnitsControllerFindAllData>> => [
    createQueryKey('unitsControllerFindAll', options, true)
];

export const unitsControllerFindAllInfiniteOptions = (options?: OptionsLegacyParser<UnitsControllerFindAllData>) => {
    return infiniteQueryOptions<UnitsControllerFindAllResponse, AxiosError<UnitsControllerFindAllError>, InfiniteData<UnitsControllerFindAllResponse>, QueryKey<OptionsLegacyParser<UnitsControllerFindAllData>>, number | Pick<QueryKey<OptionsLegacyParser<UnitsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<UnitsControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await CoreUnitsService.unitsControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerFindAllInfiniteQueryKey(options)
    });
};

export const unitsControllerFindOneQueryKey = (options: OptionsLegacyParser<UnitsControllerFindOneData>) => [
    createQueryKey('unitsControllerFindOne', options)
];

export const unitsControllerFindOneOptions = (options: OptionsLegacyParser<UnitsControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUnitsService.unitsControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: unitsControllerFindOneQueryKey(options)
    });
};

export const unitsControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<UnitsControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<UnitsControllerUpdateResponse, AxiosError<UnitsControllerUpdateError>, OptionsLegacyParser<UnitsControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUnitsService.unitsControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const unitsControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<UnitsControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<UnitsControllerRemoveResponse, AxiosError<UnitsControllerRemoveError>, OptionsLegacyParser<UnitsControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUnitsService.unitsControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerCreateQueryKey = (options: OptionsLegacyParser<UsersControllerCreateData>) => [
    createQueryKey('usersControllerCreate', options)
];

export const usersControllerCreateOptions = (options: OptionsLegacyParser<UsersControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUsersService.usersControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateQueryKey(options)
    });
};

export const usersControllerCreateMutation = (options?: Partial<OptionsLegacyParser<UsersControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateResponse, AxiosError<UsersControllerCreateError>, OptionsLegacyParser<UsersControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUsersService.usersControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerFindAllQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('usersControllerFindAll', options)
];

export const usersControllerFindAllOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUsersService.usersControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllQueryKey(options)
    });
};

export const usersControllerFindOneQueryKey = (options: OptionsLegacyParser<UsersControllerFindOneData>) => [
    createQueryKey('usersControllerFindOne', options)
];

export const usersControllerFindOneOptions = (options: OptionsLegacyParser<UsersControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await CoreUsersService.usersControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindOneQueryKey(options)
    });
};

export const usersControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<UsersControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateResponse, AxiosError<UsersControllerUpdateError>, OptionsLegacyParser<UsersControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUsersService.usersControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<UsersControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<UsersControllerRemoveResponse, AxiosError<UsersControllerRemoveError>, OptionsLegacyParser<UsersControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await CoreUsersService.usersControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const activityLogsControllerSearchQueryKey = (options: OptionsLegacyParser<ActivityLogsControllerSearchData>) => [
    createQueryKey('activityLogsControllerSearch', options)
];

export const activityLogsControllerSearchOptions = (options: OptionsLegacyParser<ActivityLogsControllerSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OperationsActivityLogsService.activityLogsControllerSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogsControllerSearchQueryKey(options)
    });
};

export const activityLogsControllerSearchInfiniteQueryKey = (options: OptionsLegacyParser<ActivityLogsControllerSearchData>): QueryKey<OptionsLegacyParser<ActivityLogsControllerSearchData>> => [
    createQueryKey('activityLogsControllerSearch', options, true)
];

export const activityLogsControllerSearchInfiniteOptions = (options: OptionsLegacyParser<ActivityLogsControllerSearchData>) => {
    return infiniteQueryOptions<ActivityLogsControllerSearchResponse, AxiosError<ActivityLogsControllerSearchError>, InfiniteData<ActivityLogsControllerSearchResponse>, QueryKey<OptionsLegacyParser<ActivityLogsControllerSearchData>>, number | Pick<QueryKey<OptionsLegacyParser<ActivityLogsControllerSearchData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<ActivityLogsControllerSearchData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await OperationsActivityLogsService.activityLogsControllerSearch({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogsControllerSearchInfiniteQueryKey(options)
    });
};

export const activityLogsControllerFindByInstanceQueryKey = (options: OptionsLegacyParser<ActivityLogsControllerFindByInstanceData>) => [
    createQueryKey('activityLogsControllerFindByInstance', options)
];

export const activityLogsControllerFindByInstanceOptions = (options: OptionsLegacyParser<ActivityLogsControllerFindByInstanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await OperationsActivityLogsService.activityLogsControllerFindByInstance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: activityLogsControllerFindByInstanceQueryKey(options)
    });
};

export const syncEquipmentControllerCreateQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerCreateData>) => [
    createQueryKey('syncEquipmentControllerCreate', options)
];

export const syncEquipmentControllerCreateOptions = (options: OptionsLegacyParser<SyncEquipmentControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerCreateQueryKey(options)
    });
};

export const syncEquipmentControllerCreateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerCreateResponse, AxiosError<SyncEquipmentControllerCreateError>, OptionsLegacyParser<SyncEquipmentControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerFindAllQueryKey = (options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData>) => [
    createQueryKey('syncEquipmentControllerFindAll', options)
];

export const syncEquipmentControllerFindAllOptions = (options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindAllQueryKey(options)
    });
};

export const syncEquipmentControllerFindAllInfiniteQueryKey = (options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData>): QueryKey<OptionsLegacyParser<SyncEquipmentControllerFindAllData>> => [
    createQueryKey('syncEquipmentControllerFindAll', options, true)
];

export const syncEquipmentControllerFindAllInfiniteOptions = (options?: OptionsLegacyParser<SyncEquipmentControllerFindAllData>) => {
    return infiniteQueryOptions<SyncEquipmentControllerFindAllResponse, AxiosError<SyncEquipmentControllerFindAllError>, InfiniteData<SyncEquipmentControllerFindAllResponse>, QueryKey<OptionsLegacyParser<SyncEquipmentControllerFindAllData>>, number | Pick<QueryKey<OptionsLegacyParser<SyncEquipmentControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<SyncEquipmentControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindAllInfiniteQueryKey(options)
    });
};

export const syncEquipmentControllerFindOneQueryKey = (options: OptionsLegacyParser<SyncEquipmentControllerFindOneData>) => [
    createQueryKey('syncEquipmentControllerFindOne', options)
];

export const syncEquipmentControllerFindOneOptions = (options: OptionsLegacyParser<SyncEquipmentControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncEquipmentControllerFindOneQueryKey(options)
    });
};

export const syncEquipmentControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerUpdateResponse, AxiosError<SyncEquipmentControllerUpdateError>, OptionsLegacyParser<SyncEquipmentControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncEquipmentControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<SyncEquipmentControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<SyncEquipmentControllerRemoveResponse, AxiosError<SyncEquipmentControllerRemoveError>, OptionsLegacyParser<SyncEquipmentControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsCatalogService.syncEquipmentControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerCreateQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerCreateData>) => [
    createQueryKey('equipmentInstancesControllerCreate', options)
];

export const equipmentInstancesControllerCreateOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerCreateQueryKey(options)
    });
};

export const equipmentInstancesControllerCreateMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerCreateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerCreateResponse, AxiosError<EquipmentInstancesControllerCreateError>, OptionsLegacyParser<EquipmentInstancesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerUploadFilesQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerUploadFilesData>) => [
    createQueryKey('equipmentInstancesControllerUploadFiles', options)
];

export const equipmentInstancesControllerUploadFilesOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerUploadFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerUploadFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerUploadFilesQueryKey(options)
    });
};

export const equipmentInstancesControllerUploadFilesMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerUploadFilesData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerUploadFilesResponse, AxiosError<EquipmentInstancesControllerUploadFilesError>, OptionsLegacyParser<EquipmentInstancesControllerUploadFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerUploadFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerGetImageQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerGetImageData>) => [
    createQueryKey('equipmentInstancesControllerGetImage', options)
];

export const equipmentInstancesControllerGetImageOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerGetImageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerGetImage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerGetImageQueryKey(options)
    });
};

export const equipmentInstancesControllerSearchQueryKey = (options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData>) => [
    createQueryKey('equipmentInstancesControllerSearch', options)
];

export const equipmentInstancesControllerSearchOptions = (options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerSearchQueryKey(options)
    });
};

export const equipmentInstancesControllerSearchInfiniteQueryKey = (options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData>): QueryKey<OptionsLegacyParser<EquipmentInstancesControllerSearchData>> => [
    createQueryKey('equipmentInstancesControllerSearch', options, true)
];

export const equipmentInstancesControllerSearchInfiniteOptions = (options?: OptionsLegacyParser<EquipmentInstancesControllerSearchData>) => {
    return infiniteQueryOptions<EquipmentInstancesControllerSearchResponse, AxiosError<EquipmentInstancesControllerSearchError>, InfiniteData<EquipmentInstancesControllerSearchResponse>, QueryKey<OptionsLegacyParser<EquipmentInstancesControllerSearchData>>, number | Pick<QueryKey<OptionsLegacyParser<EquipmentInstancesControllerSearchData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<EquipmentInstancesControllerSearchData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerSearch({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerSearchInfiniteQueryKey(options)
    });
};

export const equipmentInstancesControllerFindOneQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerFindOneData>) => [
    createQueryKey('equipmentInstancesControllerFindOne', options)
];

export const equipmentInstancesControllerFindOneOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerFindOneQueryKey(options)
    });
};

export const equipmentInstancesControllerUpdateMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerUpdateData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerUpdateResponse, AxiosError<EquipmentInstancesControllerUpdateError>, OptionsLegacyParser<EquipmentInstancesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerRemoveMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerRemoveData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerRemoveResponse, AxiosError<EquipmentInstancesControllerRemoveError>, OptionsLegacyParser<EquipmentInstancesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerHandoverQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerHandoverData>) => [
    createQueryKey('equipmentInstancesControllerHandover', options)
];

export const equipmentInstancesControllerHandoverOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerHandoverData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerHandover({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerHandoverQueryKey(options)
    });
};

export const equipmentInstancesControllerHandoverMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerHandoverData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerHandoverResponse, AxiosError<EquipmentInstancesControllerHandoverError>, OptionsLegacyParser<EquipmentInstancesControllerHandoverData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerHandover({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerRepairQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerRepairData>) => [
    createQueryKey('equipmentInstancesControllerRepair', options)
];

export const equipmentInstancesControllerRepairOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerRepairData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerRepair({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerRepairQueryKey(options)
    });
};

export const equipmentInstancesControllerRepairMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerRepairData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerRepairResponse, AxiosError<EquipmentInstancesControllerRepairError>, OptionsLegacyParser<EquipmentInstancesControllerRepairData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerRepair({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const equipmentInstancesControllerDisposeQueryKey = (options: OptionsLegacyParser<EquipmentInstancesControllerDisposeData>) => [
    createQueryKey('equipmentInstancesControllerDispose', options)
];

export const equipmentInstancesControllerDisposeOptions = (options: OptionsLegacyParser<EquipmentInstancesControllerDisposeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerDispose({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: equipmentInstancesControllerDisposeQueryKey(options)
    });
};

export const equipmentInstancesControllerDisposeMutation = (options?: Partial<OptionsLegacyParser<EquipmentInstancesControllerDisposeData>>) => {
    const mutationOptions: UseMutationOptions<EquipmentInstancesControllerDisposeResponse, AxiosError<EquipmentInstancesControllerDisposeError>, OptionsLegacyParser<EquipmentInstancesControllerDisposeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await SyncEquipmentsInstancesService.equipmentInstancesControllerDispose({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};