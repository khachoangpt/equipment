// This file is auto-generated by @hey-api/openapi-ts

export type ActivityLog = {
    /**
     * Mongo document ID
     */
    _id: string;
    instanceId?: EquipmentInstance;
    componentId?: Component;
    activityType: 'Bàn giao' | 'Sửa chữa' | 'Kiểm kê' | 'Thanh lý' | 'Tăng số lượng thiết bị' | 'Xóa thiết bị' | 'Cập nhật thông tin trang bị' | 'Tạo trang bị' | 'Cập nhật sửa chữa' | 'Tạo sửa chữa' | 'Xóa sửa chữa' | 'Cập nhật bàn giao' | 'Tạo bàn giao' | 'Xóa bàn giao' | 'Cập nhật kiểm kê' | 'Tạo kiểm kê' | 'Xóa kiểm kê';
    createdBy: User;
    /**
     * Chi tiết hoạt động, cấu trúc thay đổi theo activityType
     */
    details: {
        [key: string]: unknown;
    };
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type activityType = 'Bàn giao' | 'Sửa chữa' | 'Kiểm kê' | 'Thanh lý' | 'Tăng số lượng thiết bị' | 'Xóa thiết bị' | 'Cập nhật thông tin trang bị' | 'Tạo trang bị' | 'Cập nhật sửa chữa' | 'Tạo sửa chữa' | 'Xóa sửa chữa' | 'Cập nhật bàn giao' | 'Tạo bàn giao' | 'Xóa bàn giao' | 'Cập nhật kiểm kê' | 'Tạo kiểm kê' | 'Xóa kiểm kê';

export type AddComponentStockDto = {
    /**
     * Số lượng vật tư/linh kiện nhập thêm
     */
    quantity: number;
    /**
     * Ghi chú cho lần nhập kho này
     */
    notes?: string;
};

export type AssembledProductConfig = {
    [key: string]: unknown;
};

export type BuildActivity = {
    [key: string]: unknown;
};

export type BuildCheckDto = {
    /**
     * ID của cấu hình trang bị cần xây dựng
     */
    configId: string;
    quantityToBuild: number;
};

export type Component = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    unitOfMeasure: string;
    quantityInStock: number;
    supplyingUnit?: Unit;
    receivingUnit?: Unit;
    storageLocation?: string;
    technicalFeatures?: string;
    /**
     * Danh sách các sản phẩm hoàn chỉnh có thể tích hợp
     */
    compatibleProducts?: Array<(string)>;
    attachments: Array<DocumentAttachment>;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateAssembledProductConfigDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId: string;
    name: string;
    unitOfMeasure: string;
    technicalFeatures?: string;
    componentList: Array<RequiredComponentDto>;
    notes?: string;
};

export type CreateBuildActivityDto = {
    /**
     * ID của cấu hình trang bị đã được kiểm tra
     */
    configId: string;
    /**
     * Số lượng trang bị được xây dựng
     */
    quantity: number;
    /**
     * ID của đơn vị thực hiện xây dựng
     */
    buildingUnitId: string;
    notes?: string;
};

export type CreateComponentDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId: string;
    name: string;
    unitOfMeasure: string;
    /**
     * Số lượng ban đầu trong kho
     */
    quantityInStock?: number;
    /**
     * Ngày nhập kho
     */
    time?: string;
    /**
     * ID của Đơn vị cấp
     */
    supplyingUnitId?: string;
    /**
     * ID của Đơn vị nhận
     */
    receivingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationContent?: string;
    storageLocation?: string;
    technicalFeatures?: string;
    /**
     * Danh sách các sản phẩm hoàn chỉnh có thể tích hợp
     */
    compatibleProducts?: Array<(string)>;
    notes?: string;
};

export type CreateEquipmentDisposeDto = {
    /**
     * Số quyết định thanh lý
     */
    decisionNumber: string;
    /**
     * Người ký quyết định
     */
    signer: string;
    /**
     * ID của người phê duyệt
     */
    approver?: string;
    /**
     * ID của người phê duyệt thanh lý
     */
    disposalApprovedBy?: string;
    /**
     * ID của người từ chối thanh lý
     */
    disposalRejectedBy?: string;
    /**
     * ID của đơn vị thanh lý
     */
    fromUnitId: (ObjectId);
    /**
     * Ngày thanh lý
     */
    disposalDate: string;
    /**
     * Số hóa đơn
     */
    invoiceNumber?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Danh sách các trang bị thanh lý
     */
    items: Array<(string)>;
    /**
     * Loại hoạt động: disposal (thanh lý) hoặc liquidation (tiêu hủy)
     */
    type?: 'disposal' | 'liquidation';
};

/**
 * Loại hoạt động: disposal (thanh lý) hoặc liquidation (tiêu hủy)
 */
export type type = 'disposal' | 'liquidation';

export type CreateEquipmentDto = {
    name: string;
    /**
     * ID của Nhóm loại trang bị
     */
    groupId: string;
    field?: string;
    initialPrice?: number;
    countryOfOrigin?: string;
    technicalSpecs?: string;
    configuration?: string;
    images?: Array<(string)>;
    notes?: string;
};

export type CreateEquipmentGroupDto = {
    name: string;
    code: string;
    note?: string;
};

export type CreateEquipmentInstanceDetailDto = {
    /**
     * ID của trang bị gốc (EquipmentInstance)
     */
    instanceId: string;
    detailSerialNumber?: string;
    status?: string;
    /**
     * ID của Đơn vị sử dụng
     */
    usingUnitId?: string;
    /**
     * ID của Chất lượng trang bị
     */
    qualityLevelId?: string;
    storageLocation?: string;
    /**
     * Ghi chú
     */
    notes?: string;
};

export type CreateEquipmentInstanceDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId: string;
    /**
     * ID của hoạt động xây dựng trang bị lắp ráp
     */
    buildActivityId?: string;
    serialNumber: string;
    name: string;
    unitOfMeasure: string;
    currentPrice?: number;
    /**
     * Ngày nhập kho
     */
    entryDate?: string;
    /**
     * Ngày sản xuất
     */
    productionDate?: string;
    entryPlanNumber: string;
    supplySource?: string;
    /**
     * ID của Đơn vị nhập
     */
    importingUnitId: string;
    /**
     * ID của Đơn vị sử dụng (ban đầu)
     */
    usingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationResult?: string;
    /**
     * ID của Phân cấp chất lượng
     */
    qualityLevelId?: string;
    status?: string;
    quantity: number;
    storageLocation?: string;
    /**
     * Các file ảnh cho trang bị
     */
    images: Array<(string)>;
    type?: string;
    /**
     * Các thông số kỹ thuật chi tiết (dạng key-value, lưu dưới dạng chuỗi JSON)
     */
    technicalSpecifications?: string;
    /**
     * Các tính năng cấu hình thêm (dạng key-value, lưu dưới dạng chuỗi JSON)
     */
    featureConfiguration?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Quốc gia sản xuất
     */
    countryOfOrigin?: string;
};

export type CreateHandoverEquipmentDto = {
    /**
     * Số biên bản bàn giao
     */
    reportNumber: string;
    /**
     * Name của người nhận
     */
    receiver?: string;
    /**
     * Name của người phê duyệt
     */
    approver?: string;
    /**
     * Name của người thực hiện bàn giao
     */
    sender?: string;
    /**
     * Name của người phê duyệt bàn giao
     */
    handoverApprovedBy?: string;
    /**
     * Name của người từ chối bàn giao
     */
    handoverRejectedBy?: string;
    /**
     * ID của đơn vị giao
     */
    fromUnitId?: (ObjectId);
    /**
     * ID của đơn vị nhận
     */
    toUnitId?: (ObjectId);
    /**
     * Ngày bàn giao
     */
    handoverDate: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Loại hoạt động: handover (bàn giao) hoặc recall (thu hồi)
     */
    type?: 'handover' | 'recall';
    /**
     * Danh sách các trang bị bàn giao
     */
    items: Array<(string)>;
};

/**
 * Loại hoạt động: handover (bàn giao) hoặc recall (thu hồi)
 */
export type type2 = 'handover' | 'recall';

export type CreateProductProfileDto = {
    profileName: string;
    unitOfMeasure?: string;
    requiredComponents: Array<RequiredComponentDto>;
    notes?: string;
};

export type CreateQualityLevelDto = {
    name: string;
    code: string;
    note?: string;
};

export type CreateRepairEquipmentDto = {
    /**
     * Số biên bản sửa chữa
     */
    reportNumber: string;
    /**
     * Tên người gửi đi sửa
     */
    sender?: string;
    /**
     * Tên người nhận lại sau sửa chữa
     */
    receiver?: string;
    /**
     * Tên người phê duyệt sửa chữa
     */
    approver?: string;
    /**
     * Tên người phê duyệt sửa chữa
     */
    repairApprovedBy?: string;
    /**
     * Tên người từ chối sửa chữa
     */
    repairRejectedBy?: string;
    /**
     * ID của đơn vị gửi đi sửa
     */
    fromUnitId: (ObjectId);
    /**
     * ID của đơn vị sửa chữa
     */
    repairUnitId?: (ObjectId);
    /**
     * Ngày gửi đi sửa chữa
     */
    repairDate: string;
    /**
     * Ngày nhận lại
     */
    receivedDate?: string;
    /**
     * Nơi sửa chữa
     */
    repairLocation?: string;
    /**
     * Lý do gửi đi sửa chữa
     */
    reason: string;
    /**
     * Kết quả sửa chữa
     */
    repairResult?: string;
    /**
     * Ghi chú thêm
     */
    notes?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Loại hoạt động: repair (sửa chữa) hoặc maintenance (bảo trì)
     */
    type?: 'repair' | 'maintenance';
    /**
     * Danh sách các trang bị sửa chữa
     */
    items: Array<(string)>;
};

/**
 * Loại hoạt động: repair (sửa chữa) hoặc maintenance (bảo trì)
 */
export type type3 = 'repair' | 'maintenance';

export type CreateSettingDto = {
    pagingSize?: number;
};

export type CreateUnitDto = {
    name: string;
    code: string;
    /**
     * ID của đơn vị cha
     */
    parentId?: string;
    description?: string;
};

export type CreateUserDto = {
    username: string;
    /**
     * Mật khẩu phải có ít nhất 6 ký tự
     */
    password: string;
    fullName?: string;
    role?: 'user' | 'admin';
};

export type role = 'user' | 'admin';

export type CreateUserHistoryDto = {
    /**
     * ID của người dùng được thao tác
     */
    userId: string;
    /**
     * ID của tài khoản thực hiện thao tác
     */
    accountId: string;
    /**
     * Loại thao tác được thực hiện
     */
    operation: 'CREATE' | 'UPDATE' | 'DELETE';
    /**
     * Nội dung chi tiết của thao tác
     */
    content: string;
    /**
     * Dữ liệu trước khi thay đổi (chỉ có với UPDATE và DELETE)
     */
    previousData?: {
        [key: string]: unknown;
    };
    /**
     * Dữ liệu sau khi thay đổi (chỉ có với CREATE và UPDATE)
     */
    newData?: {
        [key: string]: unknown;
    };
};

/**
 * Loại thao tác được thực hiện
 */
export type operation = 'CREATE' | 'UPDATE' | 'DELETE';

export type DisposalByDecisionResponseDto = {
    /**
     * ID của bản ghi thanh lý
     */
    _id: string;
    /**
     * Số quyết định thanh lý
     */
    decisionNumber: string;
    /**
     * Ngày thanh lý
     */
    disposalDate: string;
    /**
     * Người ký
     */
    signer: string;
    /**
     * Người phê duyệt
     */
    approver?: string;
    /**
     * Người phê duyệt thanh lý
     */
    disposalApprovedBy?: string;
    /**
     * Người từ chối thanh lý
     */
    disposalRejectedBy?: string;
    /**
     * Đơn vị giao
     */
    fromUnitId: {
        [key: string]: unknown;
    };
    /**
     * Số hóa đơn
     */
    invoiceNumber?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Bình luận
     */
    comment?: string;
    /**
     * Loại thanh lý
     */
    type?: string;
    /**
     * Người tạo
     */
    createdById: {
        [key: string]: unknown;
    };
    /**
     * Ngày tạo
     */
    createdAt: string;
    /**
     * Ngày cập nhật
     */
    updatedAt: string;
    /**
     * Danh sách trang bị thanh lý
     */
    items: Array<DisposeItemWithDetailsDto>;
    /**
     * Chi tiết trang bị
     */
    equipmentDetails: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Tổng số mục thanh lý
     */
    totalItems: number;
    /**
     * Tổng số lượng thanh lý
     */
    totalQuantity: number;
    /**
     * Số lượng bản ghi thanh lý
     */
    recordCount: number;
};

export type DisposeDto = {
    /**
     * Số quyết định thanh lý
     */
    decisionNumber: string;
    /**
     * Ngày thanh lý
     */
    disposalDate: string;
    /**
     * Người lập
     */
    createdBy: string;
    /**
     * Người ký quyết định
     */
    signer: string;
    notes?: string;
};

export type DisposeItem = {
    /**
     * ID của trang bị
     */
    instanceId: (EquipmentInstance);
    /**
     * Số lượng thanh lý cho trang bị này
     */
    quantity: number;
    /**
     * Đơn vị tính của trang bị
     */
    unitOfMeasure: string;
    /**
     * Ghi chú riêng cho từng món
     */
    notes?: string;
};

export type DisposeItemWithDetailsDto = {
    /**
     * ID của trang bị
     */
    instanceId: string;
    /**
     * Số lượng thanh lý
     */
    quantity: number;
    /**
     * Đơn vị tính
     */
    unitOfMeasure: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Chi tiết trang bị
     */
    equipmentDetails?: {
        [key: string]: unknown;
    };
};

export type DocumentAttachment = {
    /**
     * Mongo document ID
     */
    _id: string;
    url: string;
    activityType: 'IMAGE' | 'DOCUMENT';
};

export type activityType2 = 'IMAGE' | 'DOCUMENT';

export type Equipment = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    groupId: EquipmentGroup;
    field?: string;
    initialPrice?: number;
    countryOfOrigin?: string;
    technicalSpecs?: string;
    configuration?: string;
    images?: Array<(string)>;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type EquipmentDispose = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Số quyết định thanh lý
     */
    decisionNumber: string;
    /**
     * Người lập
     */
    createdById: (User);
    /**
     * Người ký quyết định
     */
    signer: string;
    /**
     * ID của người phê duyệt
     */
    approver?: string;
    /**
     * ID của người phê duyệt thanh lý
     */
    disposalApprovedBy?: string;
    /**
     * ID của người từ chối thanh lý
     */
    disposalRejectedBy?: string;
    /**
     * ID của đơn vị thanh lý
     */
    fromUnitId: (Unit);
    /**
     * Ngày thanh lý
     */
    disposalDate: string;
    /**
     * Số hóa đơn
     */
    invoiceNumber?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Danh sách các trang bị thanh lý
     */
    items: Array<DisposeItem>;
    /**
     * Loại hoạt động: disposal (thanh lý) hoặc liquidation (tiêu hủy)
     */
    type?: 'disposal' | 'liquidation';
};

export type EquipmentGroup = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    code: string;
    note?: string;
    createdAt: string;
    updatedAt: string;
};

export type EquipmentInstance = {
    /**
     * Mongo document ID
     */
    _id: string;
    equipmentId: Equipment;
    buildActivityId?: ObjectId;
    serialNumber: string;
    name?: string;
    unitOfMeasure?: string;
    currentPrice?: number;
    entryDate: string;
    productionDate?: string;
    entryPlanNumber: string;
    supplySource?: string;
    /**
     * Đơn vị nhập ban đầu (không thay đổi)
     */
    importingUnitId: (Unit);
    /**
     * Đơn vị đang sử dụng hiện tại (thay đổi khi bàn giao)
     */
    usingUnitId?: (Unit);
    qualityLevelId: QualityLevel;
    /**
     * Đơn vị thực hiện đánh giá chất lượng ban đầu
     */
    evaluatingUnitId?: (Unit);
    /**
     * Kết quả/Nội dung đánh giá ban đầu
     */
    evaluationResult?: string;
    status: string;
    quantity?: number;
    createdAt: string;
    updatedAt: string;
    images: Array<ImageAttachment>;
    /**
     * Vị trí lưu trữ trang bị
     */
    storageLocation?: string;
    /**
     * Các thông số kỹ thuật chi tiết (dạng key-value, lưu dưới dạng chuỗi JSON)
     */
    technicalSpecifications?: string;
    /**
     * Các tính năng cấu hình thêm (dạng key-value, lưu dưới dạng chuỗi JSON)
     */
    featureConfiguration?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Quốc gia sản xuất
     */
    countryOfOrigin?: string;
};

export type EquipmentInstanceDetail = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * ID của trang bị gốc (EquipmentInstance)
     */
    instanceId: (EquipmentInstance);
    detailSerialNumber?: string;
    status?: string;
    /**
     * Đơn vị đang sử dụng hiện tại
     */
    usingUnitId?: (Unit);
    /**
     * Chất lượng trang bị
     */
    qualityLevelId?: (QualityLevel);
    /**
     * Vị trí lưu trữ trang bị
     */
    storageLocation?: string;
    /**
     * Ghi chú riêng cho từng chi tiết
     */
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type HandoverEquipment = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Số biên bản bàn giao
     */
    reportNumber: string;
    /**
     * ID của người tạo
     */
    createdById: (User);
    /**
     * ID của người nhận
     */
    receiver?: string;
    /**
     * ID của người phê duyệt
     */
    approver?: string;
    /**
     * ID của người thực hiện bàn giao
     */
    sender?: string;
    /**
     * ID của người phê duyệt bàn giao
     */
    handoverApprovedBy?: string;
    /**
     * ID của người từ chối bàn giao
     */
    handoverRejectedBy?: string;
    /**
     * ID của đơn vị giao
     */
    fromUnitId: (Unit);
    /**
     * ID của đơn vị nhận
     */
    toUnitId: (Unit);
    /**
     * Ngày bàn giao
     */
    handoverDate: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Danh sách các trang bị bàn giao
     */
    items: Array<HandoverItem>;
    /**
     * Loại hoạt động: handover (bàn giao) hoặc recall (thu hồi)
     */
    type?: 'handover' | 'recall';
};

export type HandoverItem = {
    /**
     * ID của trang bị
     */
    instanceId: (EquipmentInstance);
    /**
     * Số lượng bàn giao cho trang bị này
     */
    quantity: number;
    /**
     * Đơn vị tính của trang bị
     */
    unitOfMeasure: string;
    /**
     * Ghi chú riêng cho từng món
     */
    notes?: string;
};

export type ImageAttachment = {
    /**
     * Mongo document ID
     */
    _id: string;
    url: string;
};

export type LoginDto = {
    /**
     * Tên đăng nhập
     */
    username: string;
    /**
     * Mật khẩu
     */
    password: string;
};

export type LoginResponseDto = {
    access_token: string;
};

export type ObjectId = {
    [key: string]: unknown;
};

export type PaginationResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
};

export type ProductProfile = {
    /**
     * Mongo document ID
     */
    _id: string;
    profileName: string;
    unitOfMeasure: string;
    requiredComponents: Array<RequiredComponent>;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type QualityLevel = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    code: string;
    note?: string;
    createdAt: string;
    updatedAt: string;
};

export type RepairDto = {
    reportNumber: string;
    repairLocation: string;
    /**
     * Ngày gửi đi sửa chữa
     */
    sentDate: string;
    /**
     * Ngày nhận lại
     */
    receivedDate?: string;
    /**
     * Người gửi đi sửa (dạng text)
     */
    sender: string;
    /**
     * Người nhận lại sau khi sửa (dạng text)
     */
    receiver?: string;
    reason: string;
    result?: string;
    notes?: string;
    comment?: string;
};

export type RepairEquipment = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Số biên bản sửa chữa
     */
    reportNumber: string;
    /**
     * ID của người tạo
     */
    createdById: (User);
    /**
     * Tên người gửi đi sửa
     */
    sender?: string;
    /**
     * Tên người nhận lại sau sửa chữa
     */
    receiver?: string;
    /**
     * Tên người phê duyệt sửa chữa
     */
    approver?: string;
    /**
     * Người phê duyệt và nhận lại thiết bị
     */
    repairApprovedBy?: string;
    /**
     * Người từ chối việc sửa chữa
     */
    repairRejectedBy?: string;
    /**
     * ID của đơn vị gửi đi sửa
     */
    fromUnitId: (Unit);
    /**
     * ID của đơn vị sửa chữa
     */
    repairUnitId?: (Unit);
    /**
     * Ngày gửi đi sửa chữa
     */
    repairDate: string;
    /**
     * Ngày nhận lại
     */
    receivedDate?: string;
    repairLocation?: string;
    reason: string;
    /**
     * Kết quả sửa chữa
     */
    repairResult?: string;
    /**
     * Ghi chú tổng quan và chi phí
     */
    notes?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Danh sách các trang bị sửa chữa
     */
    items: Array<RepairItem>;
    /**
     * Loại hoạt động: repair (sửa chữa) hoặc maintenance (bảo trì)
     */
    type?: 'repair' | 'maintenance';
};

export type RepairItem = {
    /**
     * ID của trang bị
     */
    instanceId: (EquipmentInstance);
    /**
     * Số lượng gửi đi sửa chữa cho trang bị này
     */
    quantity: number;
    /**
     * Đơn vị tính của trang bị
     */
    unitOfMeasure: string;
    /**
     * Ghi chú riêng cho từng món sửa chữa
     */
    notes?: string;
};

export type RequiredComponent = {
    componentId: Component;
    quantity: number;
};

export type RequiredComponentDto = {
    /**
     * ID của vật tư/linh kiện
     */
    componentId: string;
    /**
     * Số lượng cần thiết
     */
    quantity: number;
};

export type SearchAssembledBuildActivityResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<BuildActivity>;
};

export type SearchAssembledConfigResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<AssembledProductConfig>;
};

export type SearchComponentResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<Component>;
};

export type SearchEquipmentGroupResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<EquipmentGroup>;
};

export type SearchInstanceResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<EquipmentInstance>;
};

export type SearchLogResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<ActivityLog>;
};

export type SearchProductProfileResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<ProductProfile>;
};

export type SearchQualityLevelResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<QualityLevel>;
};

export type SearchSyncEquipmentResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<Equipment>;
};

export type SearchUnitResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<Unit>;
};

export type Setting = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Kích thước trang mặc định cho phân trang
     */
    pagingSize?: number;
    updatedBy?: ObjectId;
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type Unit = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    code: string;
    /**
     * ID của đơn vị cha
     */
    parentId?: (string) | null;
    description?: string;
    createdAt: string;
    updatedAt: string;
};

export type UpdateAssembledProductConfigDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId?: string;
    name?: string;
    unitOfMeasure?: string;
    technicalFeatures?: string;
    componentList?: Array<RequiredComponentDto>;
    notes?: string;
    documentAttachments?: Array<ImageAttachment>;
};

export type UpdateBuildActivityDto = {
    /**
     * ID của cấu hình trang bị đã được kiểm tra
     */
    configId?: string;
    /**
     * Số lượng trang bị được xây dựng
     */
    quantity?: number;
    /**
     * ID của đơn vị thực hiện xây dựng
     */
    buildingUnitId?: string;
    notes?: string;
};

export type UpdateComponentDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId?: string;
    name?: string;
    unitOfMeasure?: string;
    /**
     * Số lượng ban đầu trong kho
     */
    quantityInStock?: number;
    /**
     * Ngày nhập kho
     */
    time?: string;
    /**
     * ID của Đơn vị cấp
     */
    supplyingUnitId?: string;
    /**
     * ID của Đơn vị nhận
     */
    receivingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationContent?: string;
    storageLocation?: string;
    technicalFeatures?: string;
    /**
     * Danh sách các sản phẩm hoàn chỉnh có thể tích hợp
     */
    compatibleProducts?: Array<(string)>;
    notes?: string;
    documentAttachments?: Array<DocumentAttachment>;
};

export type UpdateEquipmentDisposeDto = {
    /**
     * Số quyết định thanh lý
     */
    decisionNumber?: string;
    /**
     * Người ký quyết định
     */
    signer?: string;
    /**
     * ID của người phê duyệt
     */
    approver?: string;
    /**
     * ID của người phê duyệt thanh lý
     */
    disposalApprovedBy?: string;
    /**
     * ID của người từ chối thanh lý
     */
    disposalRejectedBy?: string;
    /**
     * ID của đơn vị thanh lý
     */
    fromUnitId?: (ObjectId);
    /**
     * Ngày thanh lý
     */
    disposalDate?: string;
    /**
     * Số hóa đơn
     */
    invoiceNumber?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Danh sách các trang bị thanh lý
     */
    items?: Array<(string)>;
    /**
     * Loại hoạt động: disposal (thanh lý) hoặc liquidation (tiêu hủy)
     */
    type?: 'disposal' | 'liquidation';
};

export type UpdateEquipmentDto = {
    name?: string;
    /**
     * ID của Nhóm loại trang bị
     */
    groupId?: string;
    field?: string;
    initialPrice?: number;
    countryOfOrigin?: string;
    technicalSpecs?: string;
    configuration?: string;
    images?: Array<(string)>;
    notes?: string;
};

export type UpdateEquipmentGroupDto = {
    name?: string;
    code?: string;
    note?: string;
};

export type UpdateEquipmentInstanceDetailDto = {
    /**
     * ID của trang bị gốc (EquipmentInstance)
     */
    instanceId?: string;
    detailSerialNumber?: string;
    status?: string;
    /**
     * ID của Đơn vị sử dụng
     */
    usingUnitId?: string;
    /**
     * ID của Chất lượng trang bị
     */
    qualityLevelId?: string;
    storageLocation?: string;
    /**
     * Ghi chú
     */
    notes?: string;
};

export type UpdateEquipmentInstanceDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId?: string;
    /**
     * ID của hoạt động xây dựng trang bị lắp ráp
     */
    buildActivityId?: string;
    serialNumber?: string;
    name?: string;
    unitOfMeasure?: string;
    currentPrice?: number;
    /**
     * Ngày nhập kho
     */
    entryDate?: string;
    /**
     * Ngày sản xuất
     */
    productionDate?: string;
    entryPlanNumber?: string;
    supplySource?: string;
    /**
     * ID của Đơn vị nhập
     */
    importingUnitId?: string;
    /**
     * ID của Đơn vị sử dụng (ban đầu)
     */
    usingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationResult?: string;
    /**
     * ID của Phân cấp chất lượng
     */
    qualityLevelId?: string;
    status?: string;
    quantity?: number;
    storageLocation?: string;
    /**
     * Các file ảnh cho trang bị
     */
    images?: Array<(string)>;
    type?: string;
    /**
     * Các thông số kỹ thuật chi tiết (dạng key-value, lưu dưới dạng chuỗi JSON)
     */
    technicalSpecifications?: string;
    /**
     * Các tính năng cấu hình thêm (dạng key-value, lưu dưới dạng chuỗi JSON)
     */
    featureConfiguration?: string;
    /**
     * Ghi chú
     */
    notes?: string;
    /**
     * Quốc gia sản xuất
     */
    countryOfOrigin?: string;
};

export type UpdateHandoverEquipmentDto = {
    /**
     * Số biên bản bàn giao
     */
    reportNumber?: string;
    /**
     * Name của người nhận
     */
    receiver?: string;
    /**
     * Name của người phê duyệt
     */
    approver?: string;
    /**
     * Name của người thực hiện bàn giao
     */
    sender?: string;
    /**
     * Name của người phê duyệt bàn giao
     */
    handoverApprovedBy?: string;
    /**
     * Name của người từ chối bàn giao
     */
    handoverRejectedBy?: string;
    /**
     * ID của đơn vị giao
     */
    fromUnitId?: (ObjectId);
    /**
     * ID của đơn vị nhận
     */
    toUnitId?: (ObjectId);
    /**
     * Ngày bàn giao
     */
    handoverDate?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Loại hoạt động: handover (bàn giao) hoặc recall (thu hồi)
     */
    type?: 'handover' | 'recall';
    /**
     * Danh sách các trang bị bàn giao
     */
    items?: Array<(string)>;
};

export type UpdateProductProfileDto = {
    profileName?: string;
    unitOfMeasure?: string;
    requiredComponents?: Array<RequiredComponentDto>;
    notes?: string;
};

export type UpdateQualityLevelDto = {
    name?: string;
    code?: string;
    note?: string;
};

export type UpdateRepairEquipmentDto = {
    /**
     * Số biên bản sửa chữa
     */
    reportNumber?: string;
    /**
     * Tên người gửi đi sửa
     */
    sender?: string;
    /**
     * Tên người nhận lại sau sửa chữa
     */
    receiver?: string;
    /**
     * Tên người phê duyệt sửa chữa
     */
    approver?: string;
    /**
     * Tên người phê duyệt sửa chữa
     */
    repairApprovedBy?: string;
    /**
     * Tên người từ chối sửa chữa
     */
    repairRejectedBy?: string;
    /**
     * ID của đơn vị gửi đi sửa
     */
    fromUnitId?: (ObjectId);
    /**
     * ID của đơn vị sửa chữa
     */
    repairUnitId?: (ObjectId);
    /**
     * Ngày gửi đi sửa chữa
     */
    repairDate?: string;
    /**
     * Ngày nhận lại
     */
    receivedDate?: string;
    /**
     * Nơi sửa chữa
     */
    repairLocation?: string;
    /**
     * Lý do gửi đi sửa chữa
     */
    reason?: string;
    /**
     * Kết quả sửa chữa
     */
    repairResult?: string;
    /**
     * Ghi chú thêm
     */
    notes?: string;
    /**
     * Ghi chú thêm
     */
    comment?: string;
    /**
     * Loại hoạt động: repair (sửa chữa) hoặc maintenance (bảo trì)
     */
    type?: 'repair' | 'maintenance';
    /**
     * Danh sách các trang bị sửa chữa
     */
    items?: Array<(string)>;
};

export type UpdateSettingDto = {
    pagingSize?: number;
};

export type UpdateUnitDto = {
    name?: string;
    code?: string;
    /**
     * ID của đơn vị cha
     */
    parentId?: string;
    description?: string;
};

export type UpdateUserDto = {
    fullName?: string;
    role?: 'user' | 'admin';
};

export type User = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Tên đăng nhập (duy nhất)
     */
    username: string;
    fullName?: string;
    /**
     * Vai trò người dùng
     */
    role: 'user' | 'admin';
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type UserHistoryResponseDto = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * ID của người dùng được thao tác
     */
    userId: string;
    /**
     * ID của tài khoản thực hiện thao tác
     */
    accountId: string;
    /**
     * Loại thao tác được thực hiện
     */
    operation: 'CREATE' | 'UPDATE' | 'DELETE';
    /**
     * Nội dung chi tiết của thao tác
     */
    content: string;
    /**
     * Dữ liệu trước khi thay đổi (chỉ có với UPDATE và DELETE)
     */
    previousData?: {
        [key: string]: unknown;
    };
    /**
     * Dữ liệu sau khi thay đổi (chỉ có với CREATE và UPDATE)
     */
    newData?: {
        [key: string]: unknown;
    };
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type UserResponseDto = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Tên đăng nhập (duy nhất)
     */
    username: string;
    fullName?: string;
    /**
     * Vai trò người dùng
     */
    role: 'user' | 'admin';
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type AppControllerGetHelloResponse = (unknown);

export type AppControllerGetHelloError = unknown;

export type ComponentsControllerCreateData = {
    body: CreateComponentDto;
};

export type ComponentsControllerCreateResponse = (Component);

export type ComponentsControllerCreateError = unknown;

export type ComponentsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type ComponentsControllerFindAllResponse = (SearchComponentResponseDto);

export type ComponentsControllerFindAllError = unknown;

export type ComponentsControllerUploadFilesData = {
    body: {
        files?: Array<((Blob | File))>;
    };
    headers: {
        /**
         * The ID of the equipment instance
         */
        'x-component-attachment-type': string;
    };
    path: {
        id: string;
    };
};

export type ComponentsControllerUploadFilesResponse = (unknown);

export type ComponentsControllerUploadFilesError = unknown;

export type ComponentsControllerGetImageData = {
    path: {
        imageId: string;
    };
};

export type ComponentsControllerGetImageResponse = (unknown);

export type ComponentsControllerGetImageError = unknown;

export type ComponentsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type ComponentsControllerFindOneResponse = (Component);

export type ComponentsControllerFindOneError = (unknown);

export type ComponentsControllerUpdateData = {
    body: UpdateComponentDto;
    path: {
        id: string;
    };
};

export type ComponentsControllerUpdateResponse = (Component);

export type ComponentsControllerUpdateError = (unknown);

export type ComponentsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type ComponentsControllerRemoveResponse = (Component);

export type ComponentsControllerRemoveError = (unknown);

export type ComponentsControllerAddComponentStockData = {
    body: AddComponentStockDto;
    path: {
        id: string;
    };
};

export type ComponentsControllerAddComponentStockResponse = (unknown);

export type ComponentsControllerAddComponentStockError = unknown;

export type AssembledEquipmentControllerCreateConfigData = {
    body: CreateAssembledProductConfigDto;
};

export type AssembledEquipmentControllerCreateConfigResponse = (unknown);

export type AssembledEquipmentControllerCreateConfigError = unknown;

export type AssembledEquipmentControllerFindAllConfigsData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type AssembledEquipmentControllerFindAllConfigsResponse = (SearchAssembledConfigResponseDto);

export type AssembledEquipmentControllerFindAllConfigsError = unknown;

export type AssembledEquipmentControllerUploadFilesData = {
    body: {
        documents?: Array<((Blob | File))>;
    };
    headers: {
        /**
         * The ID of the equipment instance
         */
        'x-assembled-equipment-config-type': string;
    };
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerUploadFilesResponse = (unknown);

export type AssembledEquipmentControllerUploadFilesError = unknown;

export type AssembledEquipmentControllerGetImageData = {
    path: {
        id: string;
        imageId: string;
    };
};

export type AssembledEquipmentControllerGetImageResponse = (unknown);

export type AssembledEquipmentControllerGetImageError = unknown;

export type AssembledEquipmentControllerFindConfigByIdData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerFindConfigByIdResponse = (unknown);

export type AssembledEquipmentControllerFindConfigByIdError = unknown;

export type AssembledEquipmentControllerUpdateConfigData = {
    body: UpdateAssembledProductConfigDto;
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerUpdateConfigResponse = (unknown);

export type AssembledEquipmentControllerUpdateConfigError = unknown;

export type AssembledEquipmentControllerRemoveConfigData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerRemoveConfigResponse = (unknown);

export type AssembledEquipmentControllerRemoveConfigError = unknown;

export type AssembledEquipmentControllerCheckBuildAvailabilityData = {
    body: BuildCheckDto;
};

export type AssembledEquipmentControllerCheckBuildAvailabilityResponse = (unknown);

export type AssembledEquipmentControllerCheckBuildAvailabilityError = unknown;

export type AssembledEquipmentControllerCreateBuildActivityData = {
    body: CreateBuildActivityDto;
};

export type AssembledEquipmentControllerCreateBuildActivityResponse = (unknown);

export type AssembledEquipmentControllerCreateBuildActivityError = unknown;

export type AssembledEquipmentControllerFindAllBuildActivitiesData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type AssembledEquipmentControllerFindAllBuildActivitiesResponse = (SearchAssembledBuildActivityResponseDto);

export type AssembledEquipmentControllerFindAllBuildActivitiesError = unknown;

export type AssembledEquipmentControllerGenerateAssemblyCheckPdfData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerGenerateAssemblyCheckPdfResponse = (unknown);

export type AssembledEquipmentControllerGenerateAssemblyCheckPdfError = unknown;

export type AssembledEquipmentControllerGenerateInventoryReportLayoutResponse = (unknown);

export type AssembledEquipmentControllerGenerateInventoryReportLayoutError = unknown;

export type AssembledEquipmentControllerFindbuildActivityByIdData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerFindbuildActivityByIdResponse = (unknown);

export type AssembledEquipmentControllerFindbuildActivityByIdError = unknown;

export type AssembledEquipmentControllerUpdateBuildActivityData = {
    body: UpdateBuildActivityDto;
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerUpdateBuildActivityResponse = (unknown);

export type AssembledEquipmentControllerUpdateBuildActivityError = unknown;

export type AssembledEquipmentControllerRemoveBuildActivityData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerRemoveBuildActivityResponse = (unknown);

export type AssembledEquipmentControllerRemoveBuildActivityError = unknown;

export type SettingsControllerCreateData = {
    body: CreateSettingDto;
};

export type SettingsControllerCreateResponse = (Setting);

export type SettingsControllerCreateError = (unknown);

export type SettingsControllerFindAllResponse = (Array<Setting>);

export type SettingsControllerFindAllError = unknown;

export type SettingsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type SettingsControllerFindOneResponse = (Setting);

export type SettingsControllerFindOneError = (unknown);

export type SettingsControllerUpdateData = {
    body: UpdateSettingDto;
    path: {
        id: string;
    };
};

export type SettingsControllerUpdateResponse = (Setting);

export type SettingsControllerUpdateError = (unknown);

export type ProductProfilesControllerCreateData = {
    body: CreateProductProfileDto;
};

export type ProductProfilesControllerCreateResponse = (ProductProfile);

export type ProductProfilesControllerCreateError = unknown;

export type ProductProfilesControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type ProductProfilesControllerFindAllResponse = (SearchProductProfileResponse);

export type ProductProfilesControllerFindAllError = unknown;

export type ProductProfilesControllerFindOneData = {
    path: {
        id: string;
    };
};

export type ProductProfilesControllerFindOneResponse = (ProductProfile);

export type ProductProfilesControllerFindOneError = (unknown);

export type ProductProfilesControllerUpdateData = {
    body: UpdateProductProfileDto;
    path: {
        id: string;
    };
};

export type ProductProfilesControllerUpdateResponse = (ProductProfile);

export type ProductProfilesControllerUpdateError = (unknown);

export type ProductProfilesControllerRemoveData = {
    path: {
        id: string;
    };
};

export type ProductProfilesControllerRemoveResponse = (ProductProfile);

export type ProductProfilesControllerRemoveError = (unknown);

export type AuthControllerLoginData = {
    body: LoginDto;
};

export type AuthControllerLoginResponse = (LoginResponseDto);

export type AuthControllerLoginError = (unknown);

export type EquipmentGroupsControllerCreateData = {
    body: CreateEquipmentGroupDto;
};

export type EquipmentGroupsControllerCreateResponse = (EquipmentGroup);

export type EquipmentGroupsControllerCreateError = unknown;

export type EquipmentGroupsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type EquipmentGroupsControllerFindAllResponse = (SearchEquipmentGroupResponse);

export type EquipmentGroupsControllerFindAllError = unknown;

export type EquipmentGroupsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentGroupsControllerFindOneResponse = (EquipmentGroup);

export type EquipmentGroupsControllerFindOneError = (unknown);

export type EquipmentGroupsControllerUpdateData = {
    body: UpdateEquipmentGroupDto;
    path: {
        id: string;
    };
};

export type EquipmentGroupsControllerUpdateResponse = (EquipmentGroup);

export type EquipmentGroupsControllerUpdateError = (unknown);

export type EquipmentGroupsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentGroupsControllerRemoveResponse = (EquipmentGroup);

export type EquipmentGroupsControllerRemoveError = (unknown);

export type QualityLevelsControllerCreateData = {
    body: CreateQualityLevelDto;
};

export type QualityLevelsControllerCreateResponse = (QualityLevel);

export type QualityLevelsControllerCreateError = (unknown);

export type QualityLevelsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type QualityLevelsControllerFindAllResponse = (SearchQualityLevelResponse);

export type QualityLevelsControllerFindAllError = unknown;

export type QualityLevelsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type QualityLevelsControllerFindOneResponse = (QualityLevel);

export type QualityLevelsControllerFindOneError = (unknown);

export type QualityLevelsControllerUpdateData = {
    body: UpdateQualityLevelDto;
    path: {
        id: string;
    };
};

export type QualityLevelsControllerUpdateResponse = (QualityLevel);

export type QualityLevelsControllerUpdateError = (unknown);

export type QualityLevelsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type QualityLevelsControllerRemoveResponse = (QualityLevel);

export type QualityLevelsControllerRemoveError = (unknown);

export type UnitsControllerCreateData = {
    body: CreateUnitDto;
};

export type UnitsControllerCreateResponse = (Unit);

export type UnitsControllerCreateError = (unknown);

export type UnitsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type UnitsControllerFindAllResponse = (SearchUnitResponseDto);

export type UnitsControllerFindAllError = unknown;

export type UnitsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type UnitsControllerFindOneResponse = (Unit);

export type UnitsControllerFindOneError = (unknown);

export type UnitsControllerUpdateData = {
    body: UpdateUnitDto;
    path: {
        id: string;
    };
};

export type UnitsControllerUpdateResponse = (Unit);

export type UnitsControllerUpdateError = (unknown);

export type UnitsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type UnitsControllerRemoveResponse = (Unit);

export type UnitsControllerRemoveError = (unknown);

export type UserHistoryControllerCreateData = {
    body: CreateUserHistoryDto;
};

export type UserHistoryControllerCreateResponse = (UserHistoryResponseDto);

export type UserHistoryControllerCreateError = (unknown);

export type UserHistoryControllerSearchData = {
    query?: {
        /**
         * ID của tài khoản thực hiện thao tác
         */
        accountId?: string;
        /**
         * Ngày kết thúc tìm kiếm (ISO string)
         */
        endDate?: string;
        /**
         * Số bản ghi mỗi trang
         */
        limit?: number;
        /**
         * Loại thao tác cần tìm
         */
        operation?: 'CREATE' | 'UPDATE' | 'DELETE';
        /**
         * Số trang (bắt đầu từ 1)
         */
        page?: number;
        /**
         * Ngày bắt đầu tìm kiếm (ISO string)
         */
        startDate?: string;
        /**
         * ID của người dùng cần tìm lịch sử
         */
        userId?: string;
    };
};

export type UserHistoryControllerSearchResponse = (unknown);

export type UserHistoryControllerSearchError = (unknown);

export type UserHistoryControllerFindByUserIdData = {
    path: {
        userId: string;
    };
};

export type UserHistoryControllerFindByUserIdResponse = (Array<UserHistoryResponseDto>);

export type UserHistoryControllerFindByUserIdError = (unknown);

export type UserHistoryControllerFindByAccountIdData = {
    path: {
        accountId: string;
    };
};

export type UserHistoryControllerFindByAccountIdResponse = (Array<UserHistoryResponseDto>);

export type UserHistoryControllerFindByAccountIdError = (unknown);

export type UserHistoryControllerFindOneData = {
    path: {
        id: string;
    };
};

export type UserHistoryControllerFindOneResponse = (UserHistoryResponseDto);

export type UserHistoryControllerFindOneError = (unknown);

export type UsersControllerCreateData = {
    body: CreateUserDto;
};

export type UsersControllerCreateResponse = (UserResponseDto);

export type UsersControllerCreateError = (unknown);

export type UsersControllerFindAllResponse = (Array<UserResponseDto>);

export type UsersControllerFindAllError = (unknown);

export type UsersControllerFindOneData = {
    path: {
        id: string;
    };
};

export type UsersControllerFindOneResponse = (UserResponseDto);

export type UsersControllerFindOneError = (unknown);

export type UsersControllerUpdateData = {
    body: UpdateUserDto;
    path: {
        id: string;
    };
};

export type UsersControllerUpdateResponse = (UserResponseDto);

export type UsersControllerUpdateError = (unknown);

export type UsersControllerRemoveData = {
    path: {
        id: string;
    };
};

export type UsersControllerRemoveResponse = (UserResponseDto);

export type UsersControllerRemoveError = (unknown);

export type EquipmentDisposeControllerDisposeData = {
    body: CreateEquipmentDisposeDto;
};

export type EquipmentDisposeControllerDisposeResponse = (EquipmentDispose);

export type EquipmentDisposeControllerDisposeError = (unknown);

export type EquipmentDisposeControllerSearchData = {
    query?: {
        /**
         * Lọc theo Người phê duyệt
         */
        approver?: string;
        /**
         * Lọc theo ID Người lập
         */
        createdById?: string;
        /**
         * Lọc theo Số quyết định
         */
        decisionNumber?: string;
        /**
         * Lọc theo Người phê duyệt thanh lý
         */
        disposalApprovedBy?: string;
        /**
         * Lọc theo Ngày thanh lý (Tới ngày)
         */
        disposalDateEnd?: string;
        /**
         * Lọc theo Ngày thanh lý (Từ ngày)
         */
        disposalDateStart?: string;
        /**
         * Lọc theo Người từ chối thanh lý
         */
        disposalRejectedBy?: string;
        /**
         * Lọc theo tên hoặc serial trang bị
         */
        equipmentQuery?: string;
        /**
         * Lọc theo ID Đơn vị thanh lý
         */
        fromUnitId?: string;
        /**
         * Số lượng mỗi trang
         */
        limit?: number;
        /**
         * Số trang
         */
        page?: number;
        /**
         * Tìm kiếm theo số quyết định, người lập, người ký
         */
        search?: string;
        /**
         * Lọc theo Người ký
         */
        signer?: string;
        /**
         * Lọc theo loại hoạt động
         */
        type?: 'disposal' | 'liquidation';
    };
};

export type EquipmentDisposeControllerSearchResponse = (PaginationResponseDto);

export type EquipmentDisposeControllerSearchError = unknown;

export type EquipmentDisposeControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentDisposeControllerFindOneResponse = (EquipmentDispose);

export type EquipmentDisposeControllerFindOneError = (unknown);

export type EquipmentDisposeControllerUpdateData = {
    body: UpdateEquipmentDisposeDto;
    path: {
        id: string;
    };
};

export type EquipmentDisposeControllerUpdateResponse = (EquipmentDispose);

export type EquipmentDisposeControllerUpdateError = (unknown);

export type EquipmentDisposeControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentDisposeControllerRemoveResponse = (void);

export type EquipmentDisposeControllerRemoveError = (unknown);

export type EquipmentDisposeControllerFindByInstanceIdData = {
    path: {
        instanceId: string;
    };
};

export type EquipmentDisposeControllerFindByInstanceIdResponse = (EquipmentDispose);

export type EquipmentDisposeControllerFindByInstanceIdError = (unknown);

export type EquipmentDisposeControllerFindByDecisionNumberData = {
    path: {
        decisionNumber: string;
    };
};

export type EquipmentDisposeControllerFindByDecisionNumberResponse = (DisposalByDecisionResponseDto);

export type EquipmentDisposeControllerFindByDecisionNumberError = (unknown);

export type EquipmentDisposeControllerGenerateLiquidationFormLayoutResponse = (unknown);

export type EquipmentDisposeControllerGenerateLiquidationFormLayoutError = unknown;

export type EquipmentInstanceDetailsControllerCreateData = {
    body: CreateEquipmentInstanceDetailDto;
};

export type EquipmentInstanceDetailsControllerCreateResponse = (EquipmentInstanceDetail);

export type EquipmentInstanceDetailsControllerCreateError = (unknown);

export type EquipmentInstanceDetailsControllerSearchData = {
    query?: {
        /**
         * Tìm theo nước sản xuất
         */
        countryOfOrigin?: string;
        /**
         * Tìm kiếm theo serial number chi tiết
         */
        detailSerialNumber?: string;
        /**
         * ID của Nhóm loại trang bị
         */
        groupId?: ObjectId;
        /**
         * ID của trang bị gốc (EquipmentInstance)
         */
        instanceId?: ObjectId;
        /**
         * Số lượng mỗi trang
         */
        limit?: number;
        /**
         * Tìm theo tên trang bị (hỗ trợ tìm kiếm gần đúng)
         */
        name?: string;
        /**
         * Số trang
         */
        page?: number;
        /**
         * ID của Chất lượng trang bị
         */
        qualityLevelId?: ObjectId;
        /**
         * Lọc theo trạng thái
         */
        status?: string;
        /**
         * ID của Đơn vị sử dụng
         */
        usingUnitId?: ObjectId;
    };
};

export type EquipmentInstanceDetailsControllerSearchResponse = (unknown);

export type EquipmentInstanceDetailsControllerSearchError = unknown;

export type EquipmentInstanceDetailsControllerFindByInstanceIdData = {
    path: {
        instanceId: string;
    };
};

export type EquipmentInstanceDetailsControllerFindByInstanceIdResponse = (Array<EquipmentInstanceDetail>);

export type EquipmentInstanceDetailsControllerFindByInstanceIdError = unknown;

export type EquipmentInstanceDetailsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentInstanceDetailsControllerFindOneResponse = (EquipmentInstanceDetail);

export type EquipmentInstanceDetailsControllerFindOneError = (unknown);

export type EquipmentInstanceDetailsControllerUpdateData = {
    body: UpdateEquipmentInstanceDetailDto;
    path: {
        id: string;
    };
};

export type EquipmentInstanceDetailsControllerUpdateResponse = (EquipmentInstanceDetail);

export type EquipmentInstanceDetailsControllerUpdateError = (unknown);

export type EquipmentInstanceDetailsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentInstanceDetailsControllerRemoveResponse = (EquipmentInstanceDetail);

export type EquipmentInstanceDetailsControllerRemoveError = (unknown);

export type EquipmentRepairControllerRepairData = {
    body: CreateRepairEquipmentDto;
};

export type EquipmentRepairControllerRepairResponse = (RepairEquipment);

export type EquipmentRepairControllerRepairError = (unknown);

export type EquipmentRepairControllerSearchData = {
    query?: {
        /**
         * ID của người tạo để lọc
         */
        createdById?: string;
        /**
         * ID của số serial trang bị để lọc
         */
        equipmentQuery?: string;
        /**
         * ID đơn vị gửi đi sửa để lọc
         */
        fromUnitId?: string;
        /**
         * ID trang bị cụ thể để lọc
         */
        instanceId?: string;
        /**
         * Số lượng item trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang để phân trang
         */
        page?: number;
        /**
         * Ngày kết thúc để lọc sửa chữa
         */
        repairDateEnd?: string;
        /**
         * Ngày bắt đầu để lọc sửa chữa
         */
        repairDateStart?: string;
        /**
         * ID đơn vị sửa chữa để lọc
         */
        repairUnitId?: string;
        /**
         * Số biên bản sửa chữa để lọc
         */
        reportNumber?: string;
    };
};

export type EquipmentRepairControllerSearchResponse = (unknown);

export type EquipmentRepairControllerSearchError = unknown;

export type EquipmentRepairControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentRepairControllerFindOneResponse = (RepairEquipment);

export type EquipmentRepairControllerFindOneError = (unknown);

export type EquipmentRepairControllerUpdateData = {
    body: UpdateRepairEquipmentDto;
    path: {
        id: string;
    };
};

export type EquipmentRepairControllerUpdateResponse = (RepairEquipment);

export type EquipmentRepairControllerUpdateError = (unknown);

export type EquipmentRepairControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentRepairControllerRemoveResponse = (RepairEquipment);

export type EquipmentRepairControllerRemoveError = (unknown);

export type EquipmentHandoverControllerHandoverData = {
    body: CreateHandoverEquipmentDto;
};

export type EquipmentHandoverControllerHandoverResponse = (HandoverEquipment);

export type EquipmentHandoverControllerHandoverError = (unknown);

export type EquipmentHandoverControllerUpdateData = {
    body: UpdateHandoverEquipmentDto;
    path: {
        id: string;
    };
};

export type EquipmentHandoverControllerUpdateResponse = (HandoverEquipment);

export type EquipmentHandoverControllerUpdateError = (unknown);

export type EquipmentHandoverControllerDeleteData = {
    path: {
        id: string;
    };
};

export type EquipmentHandoverControllerDeleteResponse = (unknown);

export type EquipmentHandoverControllerDeleteError = (unknown);

export type EquipmentHandoverControllerValidateQuantitiesData = {
    body: CreateHandoverEquipmentDto;
};

export type EquipmentHandoverControllerValidateQuantitiesResponse = ({
    isValid?: boolean;
    errors?: Array<(string)>;
    warnings?: Array<(string)>;
});

export type EquipmentHandoverControllerValidateQuantitiesError = unknown;

export type EquipmentHandoverControllerSearchData = {
    query?: {
        /**
         * Name người phê duyệt
         */
        approver?: string;
        /**
         * ID người tạo
         */
        createdById?: string;
        /**
         * Tìm kiếm theo tên trang bị hoặc serial number
         */
        equipmentQuery?: string;
        /**
         * ID đơn vị giao
         */
        fromUnitId?: string;
        /**
         * Name người phê duyệt bàn giao
         */
        handoverApprovedBy?: string;
        /**
         * Ngày bàn giao đến
         */
        handoverDateEnd?: string;
        /**
         * Ngày bàn giao từ
         */
        handoverDateStart?: string;
        /**
         * ID trang bị
         */
        instanceId?: string;
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
        /**
         * Name người nhận
         */
        receiver?: string;
        /**
         * Số biên bản bàn giao
         */
        reportNumber?: string;
        /**
         * Name người thực hiện bàn giao
         */
        sender?: string;
        /**
         * ID đơn vị nhận
         */
        toUnitId?: string;
    };
};

export type EquipmentHandoverControllerSearchResponse = (unknown);

export type EquipmentHandoverControllerSearchError = unknown;

export type EquipmentHandoverControllerGenerateHandoverReportFromLogData = {
    path: {
        id: string;
    };
};

export type EquipmentHandoverControllerGenerateHandoverReportFromLogResponse = (unknown);

export type EquipmentHandoverControllerGenerateHandoverReportFromLogError = unknown;

export type EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateData = {
    query: {
        /**
         * Ngày kết thúc (YYYY-MM-DD)
         */
        endDate: string;
        /**
         * Ngày bắt đầu (YYYY-MM-DD)
         */
        startDate: string;
    };
};

export type EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateResponse = (unknown);

export type EquipmentHandoverControllerGenerateHandoverEvaluationReportByDateError = unknown;

export type EquipmentHandoverControllerGenerateAnnualReceptionReportData = {
    query: {
        /**
         * Năm cần tạo báo cáo
         */
        year: number;
    };
};

export type EquipmentHandoverControllerGenerateAnnualReceptionReportResponse = (unknown);

export type EquipmentHandoverControllerGenerateAnnualReceptionReportError = unknown;

export type EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutData = {
    query: {
        /**
         * Năm cần tạo báo cáo danh mục trang bị bàn giao
         */
        year: number;
    };
};

export type EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutResponse = (unknown);

export type EquipmentHandoverControllerGenerateAnnualHandoverReportLayoutError = unknown;

export type EquipmentHandoverControllerGenerateAnnualRecallReportLayoutData = {
    query: {
        /**
         * Năm cần tạo báo cáo
         */
        year: number;
    };
};

export type EquipmentHandoverControllerGenerateAnnualRecallReportLayoutResponse = (unknown);

export type EquipmentHandoverControllerGenerateAnnualRecallReportLayoutError = unknown;

export type ActivityLogsControllerSearchData = {
    query: {
        /**
         * Loại hoạt động cần tìm kiếm (Bắt buộc)
         */
        activityType: 'Bàn giao' | 'Sửa chữa' | 'Kiểm kê' | 'Thanh lý' | 'Tăng số lượng thiết bị' | 'Xóa thiết bị' | 'Cập nhật thông tin trang bị' | 'Tạo trang bị' | 'Cập nhật sửa chữa' | 'Tạo sửa chữa' | 'Xóa sửa chữa' | 'Cập nhật bàn giao' | 'Tạo bàn giao' | 'Xóa bàn giao' | 'Cập nhật kiểm kê' | 'Tạo kiểm kê' | 'Xóa kiểm kê';
        /**
         * ID của linh kiện (nếu có)
         */
        componentId?: string;
        /**
         * ID của người tạo
         */
        createdBy?: ObjectId;
        /**
         * Ngày kết thúc (YYYY-MM-DD)
         */
        endDate?: string;
        /**
         * ID của phiên bản trang bị
         */
        instanceId?: string;
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
        /**
         * Số biên bản (sửa chữa) hoặc Số QĐ (thanh lý)
         */
        reportOrDecisionNumber?: string;
        /**
         * Ngày bắt đầu (YYYY-MM-DD)
         */
        startDate?: string;
    };
};

export type ActivityLogsControllerSearchResponse = (SearchLogResponseDto);

export type ActivityLogsControllerSearchError = unknown;

export type ActivityLogsControllerFindByInstanceData = {
    path: {
        instanceId: string;
    };
};

export type ActivityLogsControllerFindByInstanceResponse = (Array<ActivityLog>);

export type ActivityLogsControllerFindByInstanceError = unknown;

export type SyncEquipmentControllerCreateData = {
    body: CreateEquipmentDto;
};

export type SyncEquipmentControllerCreateResponse = (Equipment);

export type SyncEquipmentControllerCreateError = unknown;

export type SyncEquipmentControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type SyncEquipmentControllerFindAllResponse = (SearchSyncEquipmentResponse);

export type SyncEquipmentControllerFindAllError = unknown;

export type SyncEquipmentControllerFindOneData = {
    path: {
        id: string;
    };
};

export type SyncEquipmentControllerFindOneResponse = (Equipment);

export type SyncEquipmentControllerFindOneError = (unknown);

export type SyncEquipmentControllerUpdateData = {
    body: UpdateEquipmentDto;
    path: {
        id: string;
    };
};

export type SyncEquipmentControllerUpdateResponse = (Equipment);

export type SyncEquipmentControllerUpdateError = (unknown);

export type SyncEquipmentControllerRemoveData = {
    path: {
        id: string;
    };
};

export type SyncEquipmentControllerRemoveResponse = (Equipment);

export type SyncEquipmentControllerRemoveError = (unknown);

export type EquipmentInstancesControllerCreateData = {
    body: CreateEquipmentInstanceDto;
};

export type EquipmentInstancesControllerCreateResponse = (EquipmentInstance);

export type EquipmentInstancesControllerCreateError = (unknown);

export type EquipmentInstancesControllerUploadFilesData = {
    body: {
        files?: Array<((Blob | File))>;
    };
    headers: {
        /**
         * The ID of the equipment instance
         */
        'x-equipment-instance-id': string;
    };
};

export type EquipmentInstancesControllerUploadFilesResponse = (unknown);

export type EquipmentInstancesControllerUploadFilesError = unknown;

export type EquipmentInstancesControllerGetImageData = {
    path: {
        imageId: string;
    };
};

export type EquipmentInstancesControllerGetImageResponse = (unknown);

export type EquipmentInstancesControllerGetImageError = unknown;

export type EquipmentInstancesControllerSearchData = {
    query?: {
        /**
         * Tìm theo nước sản xuất
         */
        countryOfOrigin?: string;
        /**
         * Ngày nhập kết thúc (YYYY-MM-DD)
         */
        entryDateEnd?: string;
        /**
         * Ngày nhập bắt đầu (YYYY-MM-DD)
         */
        entryDateStart?: string;
        /**
         * Tìm theo số kế hoạch nhập
         */
        entryPlanNumber?: string;
        featureConfiguration?: string;
        /**
         * ID của Nhóm loại trang bị
         */
        groupId?: string;
        /**
         * ID của Đơn vị nhập ban đầu
         */
        importingUnitId?: string;
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Tìm theo tên trang bị (hỗ trợ tìm kiếm gần đúng)
         */
        name?: string;
        /**
         * Số trang hiện tại
         */
        page?: number;
        /**
         * ID của Phân cấp chất lượng
         */
        qualityLevelId?: string;
        /**
         * Tìm theo số serial (hỗ trợ tìm kiếm gần đúng)
         */
        serialNumber?: string;
        /**
         * Tìm theo trạng thái (ví dụ: "Trong kho")
         */
        status?: string;
        technicalSpecifications?: string;
        /**
         * Tìm theo loại trang bị (ví dụ: "SYNCHRONIZED_EQUIPMENT")
         */
        type?: string;
        /**
         * ID của Đơn vị sử dụng
         */
        usingUnitId?: string;
    };
};

export type EquipmentInstancesControllerSearchResponse = (SearchInstanceResponseDto);

export type EquipmentInstancesControllerSearchError = unknown;

export type EquipmentInstancesControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerFindOneResponse = (EquipmentInstance);

export type EquipmentInstancesControllerFindOneError = (unknown);

export type EquipmentInstancesControllerUpdateData = {
    body: UpdateEquipmentInstanceDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerUpdateResponse = (EquipmentInstance);

export type EquipmentInstancesControllerUpdateError = (unknown);

export type EquipmentInstancesControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerRemoveResponse = (EquipmentInstance);

export type EquipmentInstancesControllerRemoveError = (unknown);

export type EquipmentInstancesControllerRepairData = {
    body: RepairDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerRepairResponse = (EquipmentInstance);

export type EquipmentInstancesControllerRepairError = (unknown);

export type EquipmentInstancesControllerDisposeData = {
    body: DisposeDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerDisposeResponse = (EquipmentInstance);

export type EquipmentInstancesControllerDisposeError = (unknown);