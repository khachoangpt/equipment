// This file is auto-generated by @hey-api/openapi-ts

export type ActivityLog = {
    /**
     * Mongo document ID
     */
    _id: string;
    instanceId: EquipmentInstance;
    activityType: 'Bàn giao' | 'Sửa chữa' | 'Kiểm kê' | 'Thanh lý';
    createdBy: User;
    /**
     * Chi tiết hoạt động, cấu trúc thay đổi theo activityType
     */
    details: {
        [key: string]: unknown;
    };
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type activityType = 'Bàn giao' | 'Sửa chữa' | 'Kiểm kê' | 'Thanh lý';

export type AssembledProductConfig = {
    [key: string]: unknown;
};

export type BuildActivity = {
    [key: string]: unknown;
};

export type BuildCheckDto = {
    /**
     * ID của cấu hình trang bị cần xây dựng
     */
    configId: string;
    quantityToBuild: number;
};

export type Component = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    unitOfMeasure: string;
    quantityInStock: number;
    supplyingUnit?: Unit;
    receivingUnit?: Unit;
    storageLocation?: string;
    technicalFeatures?: string;
    /**
     * Danh sách các sản phẩm hoàn chỉnh có thể tích hợp
     */
    compatibleProducts?: Array<(string)>;
    attachments: Array<DocumentAttachment>;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateAssembledProductConfigDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId: string;
    name: string;
    unitOfMeasure: string;
    technicalFeatures?: string;
    componentList: Array<RequiredComponentDto>;
    documentUrls: Array<(string)>;
    notes?: string;
};

export type CreateBuildActivityDto = {
    /**
     * ID của cấu hình trang bị đã được kiểm tra
     */
    configId: string;
    /**
     * Số lượng trang bị được xây dựng
     */
    quantity: number;
    /**
     * ID của đơn vị thực hiện xây dựng
     */
    buildingUnitId: string;
    notes?: string;
};

export type CreateComponentDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId: string;
    name: string;
    unitOfMeasure: string;
    /**
     * Số lượng ban đầu trong kho
     */
    quantityInStock?: number;
    /**
     * Ngày nhập kho
     */
    time?: string;
    /**
     * ID của Đơn vị cấp
     */
    supplyingUnitId?: string;
    /**
     * ID của Đơn vị nhận
     */
    receivingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationContent?: string;
    storageLocation?: string;
    technicalFeatures?: string;
    /**
     * Danh sách các sản phẩm hoàn chỉnh có thể tích hợp
     */
    compatibleProducts?: Array<(string)>;
    /**
     * Danh sách URL tài liệu đính kèm
     */
    attachments?: Array<(string)>;
    notes?: string;
};

export type CreateEquipmentDto = {
    name: string;
    /**
     * ID của Nhóm loại trang bị
     */
    groupId: string;
    field?: string;
    initialPrice?: number;
    countryOfOrigin?: string;
    technicalSpecs?: string;
    configuration?: string;
    images?: Array<(string)>;
    notes?: string;
};

export type CreateEquipmentGroupDto = {
    name: string;
    code: string;
    note?: string;
};

export type CreateEquipmentInstanceDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId: string;
    /**
     * ID của hoạt động xây dựng trang bị lắp ráp
     */
    buildActivityId?: string;
    serialNumber: string;
    name: string;
    unitOfMeasure: string;
    currentPrice?: number;
    /**
     * Ngày nhập kho
     */
    entryDate?: string;
    /**
     * Ngày sản xuất
     */
    productionDate?: string;
    entryPlanNumber: string;
    supplySource?: string;
    /**
     * ID của Đơn vị nhập
     */
    importingUnitId: string;
    /**
     * ID của Đơn vị sử dụng (ban đầu)
     */
    usingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationResult?: string;
    /**
     * ID của Phân cấp chất lượng
     */
    qualityLevelId?: string;
    status?: string;
    quantity: number;
    storageLocation?: string;
    /**
     * Các file ảnh cho trang bị
     */
    images: Array<(string)>;
    type?: string;
    /**
     * Ghi chú
     */
    notes?: string;
};

export type CreateProductProfileDto = {
    profileName: string;
    unitOfMeasure?: string;
    requiredComponents: Array<RequiredComponentDto>;
    notes?: string;
};

export type CreateQualityLevelDto = {
    name: string;
    code: string;
    note?: string;
};

export type CreateSettingDto = {
    pagingSize?: number;
};

export type CreateUnitDto = {
    name: string;
    code: string;
    /**
     * ID của đơn vị cha
     */
    parentId?: string;
    description?: string;
};

export type CreateUserDto = {
    username: string;
    /**
     * Mật khẩu phải có ít nhất 6 ký tự
     */
    password: string;
    fullName?: string;
    role?: 'user' | 'admin';
};

export type role = 'user' | 'admin';

export type DisposeDto = {
    /**
     * Số quyết định thanh lý
     */
    decisionNumber: string;
    /**
     * Ngày thanh lý
     */
    disposalDate: string;
    /**
     * Người lập
     */
    createdBy: string;
    /**
     * Người ký quyết định
     */
    signer: string;
    notes?: string;
};

export type DocumentAttachment = {
    /**
     * Mongo document ID
     */
    _id: string;
    url: string;
    activityType: 'IMAGE' | 'DOCUMENT';
};

export type activityType2 = 'IMAGE' | 'DOCUMENT';

export type Equipment = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    groupId: EquipmentGroup;
    field?: string;
    initialPrice?: number;
    countryOfOrigin?: string;
    technicalSpecs?: string;
    configuration?: string;
    images?: Array<(string)>;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type EquipmentGroup = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    code: string;
    note?: string;
    createdAt: string;
    updatedAt: string;
};

export type EquipmentInstance = {
    /**
     * Mongo document ID
     */
    _id: string;
    equipmentId: Equipment;
    buildActivityId?: ObjectId;
    serialNumber: string;
    name?: string;
    unitOfMeasure?: string;
    currentPrice?: number;
    entryDate: string;
    productionDate?: string;
    entryPlanNumber: string;
    supplySource?: string;
    /**
     * Đơn vị nhập ban đầu (không thay đổi)
     */
    importingUnitId: (Unit);
    /**
     * Đơn vị đang sử dụng hiện tại (thay đổi khi bàn giao)
     */
    usingUnitId?: (Unit);
    qualityLevelId: QualityLevel;
    /**
     * Đơn vị thực hiện đánh giá chất lượng ban đầu
     */
    evaluatingUnitId?: (Unit);
    /**
     * Kết quả/Nội dung đánh giá ban đầu
     */
    evaluationResult?: string;
    status: string;
    quantity?: number;
    createdAt: string;
    updatedAt: string;
    images: Array<ImageAttachment>;
    /**
     * Vị trí lưu trữ trang bị
     */
    storageLocation?: string;
    /**
     * Ghi chú
     */
    notes?: string;
};

export type HandoverDto = {
    /**
     * ID của đơn vị nhận trang bị
     */
    toUnitId: string;
    reportNumber: string;
    receiver: string;
    sender: string;
    /**
     * Ngày bán giao
     */
    handoverDate: string;
    notes?: string;
    comment?: string;
};

export type ImageAttachment = {
    /**
     * Mongo document ID
     */
    _id: string;
    url: string;
};

export type LoginDto = {
    /**
     * Tên đăng nhập
     */
    username: string;
    /**
     * Mật khẩu
     */
    password: string;
};

export type LoginResponseDto = {
    access_token: string;
};

export type ObjectId = {
    [key: string]: unknown;
};

export type ProductProfile = {
    /**
     * Mongo document ID
     */
    _id: string;
    profileName: string;
    unitOfMeasure: string;
    requiredComponents: Array<RequiredComponent>;
    notes?: string;
    createdAt: string;
    updatedAt: string;
};

export type QualityLevel = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    code: string;
    note?: string;
    createdAt: string;
    updatedAt: string;
};

export type RepairDto = {
    reportNumber: string;
    repairLocation: string;
    /**
     * Ngày gửi đi sửa chữa
     */
    sentDate: string;
    /**
     * Ngày nhận lại
     */
    receivedDate?: string;
    /**
     * Người gửi đi sửa (dạng text)
     */
    sender: string;
    /**
     * Người nhận lại sau khi sửa (dạng text)
     */
    receiver?: string;
    reason: string;
    result?: string;
    notes?: string;
    comment?: string;
};

export type RequiredComponent = {
    componentId: Component;
    quantity: number;
};

export type RequiredComponentDto = {
    /**
     * ID của vật tư/linh kiện
     */
    componentId: string;
    /**
     * Số lượng cần thiết
     */
    quantity: number;
};

export type SearchAssembledBuildActivityResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<BuildActivity>;
};

export type SearchAssembledConfigResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<AssembledProductConfig>;
};

export type SearchComponentResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<Component>;
};

export type SearchEquipmentGroupResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<EquipmentGroup>;
};

export type SearchInstanceResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<EquipmentInstance>;
};

export type SearchLogResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<ActivityLog>;
};

export type SearchProductProfileResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<ProductProfile>;
};

export type SearchQualityLevelResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<QualityLevel>;
};

export type SearchSyncEquipmentResponse = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<Equipment>;
};

export type SearchUnitResponseDto = {
    /**
     * Tổng số mục
     */
    total: number;
    /**
     * Tổng số trang
     */
    totalPages: number;
    /**
     * Số trang hiện tại
     */
    page: number;
    /**
     * Số lượng mục trên mỗi trang
     */
    limit: number;
    data: Array<Unit>;
};

export type Setting = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Kích thước trang mặc định cho phân trang
     */
    pagingSize?: number;
    updatedBy?: ObjectId;
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type Unit = {
    /**
     * Mongo document ID
     */
    _id: string;
    name: string;
    code: string;
    /**
     * ID của đơn vị cha
     */
    parentId?: (string) | null;
    description?: string;
    createdAt: string;
    updatedAt: string;
};

export type UpdateAssembledProductConfigDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId?: string;
    name?: string;
    unitOfMeasure?: string;
    technicalFeatures?: string;
    componentList?: Array<RequiredComponentDto>;
    documentUrls?: Array<(string)>;
    notes?: string;
};

export type UpdateBuildActivityDto = {
    /**
     * ID của cấu hình trang bị đã được kiểm tra
     */
    configId?: string;
    /**
     * Số lượng trang bị được xây dựng
     */
    quantity?: number;
    /**
     * ID của đơn vị thực hiện xây dựng
     */
    buildingUnitId?: string;
    notes?: string;
};

export type UpdateComponentDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId?: string;
    name?: string;
    unitOfMeasure?: string;
    /**
     * Số lượng ban đầu trong kho
     */
    quantityInStock?: number;
    /**
     * Ngày nhập kho
     */
    time?: string;
    /**
     * ID của Đơn vị cấp
     */
    supplyingUnitId?: string;
    /**
     * ID của Đơn vị nhận
     */
    receivingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationContent?: string;
    storageLocation?: string;
    technicalFeatures?: string;
    /**
     * Danh sách các sản phẩm hoàn chỉnh có thể tích hợp
     */
    compatibleProducts?: Array<(string)>;
    /**
     * Danh sách URL tài liệu đính kèm
     */
    attachments?: Array<(string)>;
    notes?: string;
};

export type UpdateEquipmentDto = {
    name?: string;
    /**
     * ID của Nhóm loại trang bị
     */
    groupId?: string;
    field?: string;
    initialPrice?: number;
    countryOfOrigin?: string;
    technicalSpecs?: string;
    configuration?: string;
    images?: Array<(string)>;
    notes?: string;
};

export type UpdateEquipmentGroupDto = {
    name?: string;
    code?: string;
    note?: string;
};

export type UpdateEquipmentInstanceDto = {
    /**
     * ID của loại trang bị (trong danh mục)
     */
    equipmentId?: string;
    /**
     * ID của hoạt động xây dựng trang bị lắp ráp
     */
    buildActivityId?: string;
    serialNumber?: string;
    name?: string;
    unitOfMeasure?: string;
    currentPrice?: number;
    /**
     * Ngày nhập kho
     */
    entryDate?: string;
    /**
     * Ngày sản xuất
     */
    productionDate?: string;
    entryPlanNumber?: string;
    supplySource?: string;
    /**
     * ID của Đơn vị nhập
     */
    importingUnitId?: string;
    /**
     * ID của Đơn vị sử dụng (ban đầu)
     */
    usingUnitId?: string;
    /**
     * ID của Đơn vị đánh giá
     */
    evaluatingUnitId?: string;
    /**
     * Nội dung đánh giá
     */
    evaluationResult?: string;
    /**
     * ID của Phân cấp chất lượng
     */
    qualityLevelId?: string;
    status?: string;
    quantity?: number;
    storageLocation?: string;
    /**
     * Các file ảnh cho trang bị
     */
    images?: Array<(string)>;
    type?: string;
    /**
     * Ghi chú
     */
    notes?: string;
};

export type UpdateProductProfileDto = {
    profileName?: string;
    unitOfMeasure?: string;
    requiredComponents?: Array<RequiredComponentDto>;
    notes?: string;
};

export type UpdateQualityLevelDto = {
    name?: string;
    code?: string;
    note?: string;
};

export type UpdateSettingDto = {
    pagingSize?: number;
};

export type UpdateUnitDto = {
    name?: string;
    code?: string;
    /**
     * ID của đơn vị cha
     */
    parentId?: string;
    description?: string;
};

export type UpdateUserDto = {
    fullName?: string;
    role?: 'user' | 'admin';
};

export type User = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Tên đăng nhập (duy nhất)
     */
    username: string;
    fullName?: string;
    /**
     * Vai trò người dùng
     */
    role: 'user' | 'admin';
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type UserResponseDto = {
    /**
     * Mongo document ID
     */
    _id: string;
    /**
     * Tên đăng nhập (duy nhất)
     */
    username: string;
    fullName?: string;
    /**
     * Vai trò người dùng
     */
    role: 'user' | 'admin';
    /**
     * Thời điểm tạo
     */
    createdAt: string;
    /**
     * Thời điểm cập nhật lần cuối
     */
    updatedAt: string;
};

export type AppControllerGetHelloResponse = (unknown);

export type AppControllerGetHelloError = unknown;

export type ComponentsControllerCreateData = {
    body: CreateComponentDto;
};

export type ComponentsControllerCreateResponse = (Component);

export type ComponentsControllerCreateError = unknown;

export type ComponentsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type ComponentsControllerFindAllResponse = (SearchComponentResponseDto);

export type ComponentsControllerFindAllError = unknown;

export type ComponentsControllerUploadFilesData = {
    body: {
        files?: Array<((Blob | File))>;
    };
    headers: {
        /**
         * The ID of the equipment instance
         */
        'x-component-attachment-type': string;
    };
    path: {
        id: string;
    };
};

export type ComponentsControllerUploadFilesResponse = (unknown);

export type ComponentsControllerUploadFilesError = unknown;

export type ComponentsControllerGetImageData = {
    path: {
        imageId: string;
    };
};

export type ComponentsControllerGetImageResponse = (unknown);

export type ComponentsControllerGetImageError = unknown;

export type ComponentsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type ComponentsControllerFindOneResponse = (Component);

export type ComponentsControllerFindOneError = (unknown);

export type ComponentsControllerUpdateData = {
    body: UpdateComponentDto;
    path: {
        id: string;
    };
};

export type ComponentsControllerUpdateResponse = (Component);

export type ComponentsControllerUpdateError = (unknown);

export type ComponentsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type ComponentsControllerRemoveResponse = (Component);

export type ComponentsControllerRemoveError = (unknown);

export type AssembledEquipmentControllerCreateConfigData = {
    body: CreateAssembledProductConfigDto;
};

export type AssembledEquipmentControllerCreateConfigResponse = (unknown);

export type AssembledEquipmentControllerCreateConfigError = unknown;

export type AssembledEquipmentControllerFindAllConfigsData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type AssembledEquipmentControllerFindAllConfigsResponse = (SearchAssembledConfigResponseDto);

export type AssembledEquipmentControllerFindAllConfigsError = unknown;

export type AssembledEquipmentControllerUploadFilesData = {
    body: {
        documents?: Array<((Blob | File))>;
    };
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerUploadFilesResponse = (unknown);

export type AssembledEquipmentControllerUploadFilesError = unknown;

export type AssembledEquipmentControllerGetImageData = {
    path: {
        id: string;
        imageId: string;
    };
};

export type AssembledEquipmentControllerGetImageResponse = (unknown);

export type AssembledEquipmentControllerGetImageError = unknown;

export type AssembledEquipmentControllerFindConfigByIdData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerFindConfigByIdResponse = (unknown);

export type AssembledEquipmentControllerFindConfigByIdError = unknown;

export type AssembledEquipmentControllerUpdateConfigData = {
    body: UpdateAssembledProductConfigDto;
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerUpdateConfigResponse = (unknown);

export type AssembledEquipmentControllerUpdateConfigError = unknown;

export type AssembledEquipmentControllerRemoveConfigData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerRemoveConfigResponse = (unknown);

export type AssembledEquipmentControllerRemoveConfigError = unknown;

export type AssembledEquipmentControllerCheckBuildAvailabilityData = {
    body: BuildCheckDto;
};

export type AssembledEquipmentControllerCheckBuildAvailabilityResponse = (unknown);

export type AssembledEquipmentControllerCheckBuildAvailabilityError = unknown;

export type AssembledEquipmentControllerCreateBuildActivityData = {
    body: CreateBuildActivityDto;
};

export type AssembledEquipmentControllerCreateBuildActivityResponse = (unknown);

export type AssembledEquipmentControllerCreateBuildActivityError = unknown;

export type AssembledEquipmentControllerFindAllBuildActivitiesData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type AssembledEquipmentControllerFindAllBuildActivitiesResponse = (SearchAssembledBuildActivityResponseDto);

export type AssembledEquipmentControllerFindAllBuildActivitiesError = unknown;

export type AssembledEquipmentControllerFindbuildActivityByIdData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerFindbuildActivityByIdResponse = (unknown);

export type AssembledEquipmentControllerFindbuildActivityByIdError = unknown;

export type AssembledEquipmentControllerUpdateBuildActivityData = {
    body: UpdateBuildActivityDto;
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerUpdateBuildActivityResponse = (unknown);

export type AssembledEquipmentControllerUpdateBuildActivityError = unknown;

export type AssembledEquipmentControllerRemoveBuildActivityData = {
    path: {
        id: string;
    };
};

export type AssembledEquipmentControllerRemoveBuildActivityResponse = (unknown);

export type AssembledEquipmentControllerRemoveBuildActivityError = unknown;

export type SettingsControllerCreateData = {
    body: CreateSettingDto;
};

export type SettingsControllerCreateResponse = (Setting);

export type SettingsControllerCreateError = (unknown);

export type SettingsControllerFindAllResponse = (Array<Setting>);

export type SettingsControllerFindAllError = unknown;

export type SettingsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type SettingsControllerFindOneResponse = (Setting);

export type SettingsControllerFindOneError = (unknown);

export type SettingsControllerUpdateData = {
    body: UpdateSettingDto;
    path: {
        id: string;
    };
};

export type SettingsControllerUpdateResponse = (Setting);

export type SettingsControllerUpdateError = (unknown);

export type ProductProfilesControllerCreateData = {
    body: CreateProductProfileDto;
};

export type ProductProfilesControllerCreateResponse = (ProductProfile);

export type ProductProfilesControllerCreateError = unknown;

export type ProductProfilesControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type ProductProfilesControllerFindAllResponse = (SearchProductProfileResponse);

export type ProductProfilesControllerFindAllError = unknown;

export type ProductProfilesControllerFindOneData = {
    path: {
        id: string;
    };
};

export type ProductProfilesControllerFindOneResponse = (ProductProfile);

export type ProductProfilesControllerFindOneError = (unknown);

export type ProductProfilesControllerUpdateData = {
    body: UpdateProductProfileDto;
    path: {
        id: string;
    };
};

export type ProductProfilesControllerUpdateResponse = (ProductProfile);

export type ProductProfilesControllerUpdateError = (unknown);

export type ProductProfilesControllerRemoveData = {
    path: {
        id: string;
    };
};

export type ProductProfilesControllerRemoveResponse = (ProductProfile);

export type ProductProfilesControllerRemoveError = (unknown);

export type AuthControllerLoginData = {
    body: LoginDto;
};

export type AuthControllerLoginResponse = (LoginResponseDto);

export type AuthControllerLoginError = (unknown);

export type EquipmentGroupsControllerCreateData = {
    body: CreateEquipmentGroupDto;
};

export type EquipmentGroupsControllerCreateResponse = (EquipmentGroup);

export type EquipmentGroupsControllerCreateError = unknown;

export type EquipmentGroupsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type EquipmentGroupsControllerFindAllResponse = (SearchEquipmentGroupResponse);

export type EquipmentGroupsControllerFindAllError = unknown;

export type EquipmentGroupsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentGroupsControllerFindOneResponse = (EquipmentGroup);

export type EquipmentGroupsControllerFindOneError = (unknown);

export type EquipmentGroupsControllerUpdateData = {
    body: UpdateEquipmentGroupDto;
    path: {
        id: string;
    };
};

export type EquipmentGroupsControllerUpdateResponse = (EquipmentGroup);

export type EquipmentGroupsControllerUpdateError = (unknown);

export type EquipmentGroupsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentGroupsControllerRemoveResponse = (EquipmentGroup);

export type EquipmentGroupsControllerRemoveError = (unknown);

export type QualityLevelsControllerCreateData = {
    body: CreateQualityLevelDto;
};

export type QualityLevelsControllerCreateResponse = (QualityLevel);

export type QualityLevelsControllerCreateError = (unknown);

export type QualityLevelsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type QualityLevelsControllerFindAllResponse = (SearchQualityLevelResponse);

export type QualityLevelsControllerFindAllError = unknown;

export type QualityLevelsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type QualityLevelsControllerFindOneResponse = (QualityLevel);

export type QualityLevelsControllerFindOneError = (unknown);

export type QualityLevelsControllerUpdateData = {
    body: UpdateQualityLevelDto;
    path: {
        id: string;
    };
};

export type QualityLevelsControllerUpdateResponse = (QualityLevel);

export type QualityLevelsControllerUpdateError = (unknown);

export type QualityLevelsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type QualityLevelsControllerRemoveResponse = (QualityLevel);

export type QualityLevelsControllerRemoveError = (unknown);

export type UnitsControllerCreateData = {
    body: CreateUnitDto;
};

export type UnitsControllerCreateResponse = (Unit);

export type UnitsControllerCreateError = (unknown);

export type UnitsControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type UnitsControllerFindAllResponse = (SearchUnitResponseDto);

export type UnitsControllerFindAllError = unknown;

export type UnitsControllerFindOneData = {
    path: {
        id: string;
    };
};

export type UnitsControllerFindOneResponse = (Unit);

export type UnitsControllerFindOneError = (unknown);

export type UnitsControllerUpdateData = {
    body: UpdateUnitDto;
    path: {
        id: string;
    };
};

export type UnitsControllerUpdateResponse = (Unit);

export type UnitsControllerUpdateError = (unknown);

export type UnitsControllerRemoveData = {
    path: {
        id: string;
    };
};

export type UnitsControllerRemoveResponse = (Unit);

export type UnitsControllerRemoveError = (unknown);

export type UsersControllerCreateData = {
    body: CreateUserDto;
};

export type UsersControllerCreateResponse = (UserResponseDto);

export type UsersControllerCreateError = (unknown);

export type UsersControllerFindAllResponse = (Array<UserResponseDto>);

export type UsersControllerFindAllError = (unknown);

export type UsersControllerFindOneData = {
    path: {
        id: string;
    };
};

export type UsersControllerFindOneResponse = (UserResponseDto);

export type UsersControllerFindOneError = (unknown);

export type UsersControllerUpdateData = {
    body: UpdateUserDto;
    path: {
        id: string;
    };
};

export type UsersControllerUpdateResponse = (UserResponseDto);

export type UsersControllerUpdateError = (unknown);

export type UsersControllerRemoveData = {
    path: {
        id: string;
    };
};

export type UsersControllerRemoveResponse = (UserResponseDto);

export type UsersControllerRemoveError = (unknown);

export type ActivityLogsControllerSearchData = {
    query: {
        /**
         * Loại hoạt động cần tìm kiếm (Bắt buộc)
         */
        activityType: 'Bàn giao' | 'Sửa chữa' | 'Kiểm kê' | 'Thanh lý';
        /**
         * ID của người tạo
         */
        createdBy?: ObjectId;
        /**
         * Ngày kết thúc (YYYY-MM-DD)
         */
        endDate?: string;
        /**
         * ID của phiên bản trang bị
         */
        instanceId?: string;
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
        /**
         * Số biên bản (sửa chữa) hoặc Số QĐ (thanh lý)
         */
        reportOrDecisionNumber?: string;
        /**
         * Ngày bắt đầu (YYYY-MM-DD)
         */
        startDate?: string;
    };
};

export type ActivityLogsControllerSearchResponse = (SearchLogResponseDto);

export type ActivityLogsControllerSearchError = unknown;

export type ActivityLogsControllerFindByInstanceData = {
    path: {
        instanceId: string;
    };
};

export type ActivityLogsControllerFindByInstanceResponse = (Array<ActivityLog>);

export type ActivityLogsControllerFindByInstanceError = unknown;

export type SyncEquipmentControllerCreateData = {
    body: CreateEquipmentDto;
};

export type SyncEquipmentControllerCreateResponse = (Equipment);

export type SyncEquipmentControllerCreateError = unknown;

export type SyncEquipmentControllerFindAllData = {
    query?: {
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Số trang hiện tại
         */
        page?: number;
    };
};

export type SyncEquipmentControllerFindAllResponse = (SearchSyncEquipmentResponse);

export type SyncEquipmentControllerFindAllError = unknown;

export type SyncEquipmentControllerFindOneData = {
    path: {
        id: string;
    };
};

export type SyncEquipmentControllerFindOneResponse = (Equipment);

export type SyncEquipmentControllerFindOneError = (unknown);

export type SyncEquipmentControllerUpdateData = {
    body: UpdateEquipmentDto;
    path: {
        id: string;
    };
};

export type SyncEquipmentControllerUpdateResponse = (Equipment);

export type SyncEquipmentControllerUpdateError = (unknown);

export type SyncEquipmentControllerRemoveData = {
    path: {
        id: string;
    };
};

export type SyncEquipmentControllerRemoveResponse = (Equipment);

export type SyncEquipmentControllerRemoveError = (unknown);

export type EquipmentInstancesControllerCreateData = {
    body: CreateEquipmentInstanceDto;
};

export type EquipmentInstancesControllerCreateResponse = (EquipmentInstance);

export type EquipmentInstancesControllerCreateError = (unknown);

export type EquipmentInstancesControllerUploadFilesData = {
    body: {
        files?: Array<((Blob | File))>;
    };
    headers: {
        /**
         * The ID of the equipment instance
         */
        'x-equipment-instance-id': string;
    };
};

export type EquipmentInstancesControllerUploadFilesResponse = (unknown);

export type EquipmentInstancesControllerUploadFilesError = unknown;

export type EquipmentInstancesControllerGetImageData = {
    path: {
        imageId: string;
    };
};

export type EquipmentInstancesControllerGetImageResponse = (unknown);

export type EquipmentInstancesControllerGetImageError = unknown;

export type EquipmentInstancesControllerSearchData = {
    query?: {
        /**
         * Tìm theo nước sản xuất
         */
        countryOfOrigin?: string;
        /**
         * Ngày nhập kết thúc (YYYY-MM-DD)
         */
        entryDateEnd?: string;
        /**
         * Ngày nhập bắt đầu (YYYY-MM-DD)
         */
        entryDateStart?: string;
        /**
         * Tìm theo số kế hoạch nhập
         */
        entryPlanNumber?: string;
        /**
         * ID của Nhóm loại trang bị
         */
        groupId?: string;
        /**
         * Số lượng mục trên mỗi trang
         */
        limit?: number;
        /**
         * Tìm theo tên trang bị (hỗ trợ tìm kiếm gần đúng)
         */
        name?: string;
        /**
         * Số trang hiện tại
         */
        page?: number;
        /**
         * ID của Phân cấp chất lượng
         */
        qualityLevelId?: string;
        /**
         * Tìm theo số serial (hỗ trợ tìm kiếm gần đúng)
         */
        serialNumber?: string;
        /**
         * Tìm theo trạng thái (ví dụ: "Trong kho")
         */
        status?: string;
        /**
         * Tìm theo loại trang bị (ví dụ: "SYNCHRONIZED_EQUIPMENT")
         */
        type?: string;
        /**
         * ID của Đơn vị sử dụng
         */
        usingUnitId?: string;
    };
};

export type EquipmentInstancesControllerSearchResponse = (SearchInstanceResponseDto);

export type EquipmentInstancesControllerSearchError = unknown;

export type EquipmentInstancesControllerFindOneData = {
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerFindOneResponse = (EquipmentInstance);

export type EquipmentInstancesControllerFindOneError = (unknown);

export type EquipmentInstancesControllerUpdateData = {
    body: UpdateEquipmentInstanceDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerUpdateResponse = (EquipmentInstance);

export type EquipmentInstancesControllerUpdateError = (unknown);

export type EquipmentInstancesControllerRemoveData = {
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerRemoveResponse = (EquipmentInstance);

export type EquipmentInstancesControllerRemoveError = (unknown);

export type EquipmentInstancesControllerHandoverData = {
    body: HandoverDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerHandoverResponse = (EquipmentInstance);

export type EquipmentInstancesControllerHandoverError = (unknown);

export type EquipmentInstancesControllerRepairData = {
    body: RepairDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerRepairResponse = (EquipmentInstance);

export type EquipmentInstancesControllerRepairError = (unknown);

export type EquipmentInstancesControllerDisposeData = {
    body: DisposeDto;
    path: {
        id: string;
    };
};

export type EquipmentInstancesControllerDisposeResponse = (EquipmentInstance);

export type EquipmentInstancesControllerDisposeError = (unknown);